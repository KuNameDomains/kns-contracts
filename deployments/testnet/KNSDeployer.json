{
  "address": "0xe423b964992B4E19aFc09fD44fE5460D8835D093",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ADDR_LABEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RESOLVER_LABEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVERSE_REGISTRAR_LABEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TLD_LABEL",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fifoRegistrarController",
      "outputs": [
        {
          "internalType": "contract FIFORegistrarController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        }
      ],
      "name": "namehash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "namehashDB",
      "outputs": [
        {
          "internalType": "contract NamehashDB",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicResolver",
      "outputs": [
        {
          "internalType": "contract KNSPublicResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrar",
      "outputs": [
        {
          "internalType": "contract KNSRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract KNSRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reverseRegistrar",
      "outputs": [
        {
          "internalType": "contract KNSReverseRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
  "receipt": {
    "to": null,
    "from": "0x69f7324c36F383451fB85f202d0dFbEe00aF0072",
    "contractAddress": "0xe423b964992B4E19aFc09fD44fE5460D8835D093",
    "transactionIndex": 0,
    "gasUsed": "7562148",
    "logsBloom": "0x
    "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a",
    "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
          "0xad3c37868ae515dba167cae3a0604972edf91b84b773bb7f0d69e6c5bb930f59"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x329539a1d23af1810c48a07fe7fc66a3b34fbc8b37e9b3cdb97bb88ceab7e4bf"
        ],
        "data": "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
        "logIndex": 2,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0x335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0",
          "0xad3c37868ae515dba167cae3a0604972edf91b84b773bb7f0d69e6c5bb930f59"
        ],
        "data": "0x000000000000000000000000cd923722a29a3c340d679fb0ee8fa46822310b91",
        "logIndex": 3,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0xCd923722a29a3C340d679FB0eE8fa46822310b91",
        "topics": [
          "0x65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af752",
          "0xad3c37868ae515dba167cae3a0604972edf91b84b773bb7f0d69e6c5bb930f59"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000003c00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000014cd923722a29a3c340d679fb0ee8fa46822310b91000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0xCd923722a29a3C340d679FB0eE8fa46822310b91",
        "topics": [
          "0x52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2",
          "0xad3c37868ae515dba167cae3a0604972edf91b84b773bb7f0d69e6c5bb930f59"
        ],
        "data": "0x000000000000000000000000cd923722a29a3c340d679fb0ee8fa46822310b91",
        "logIndex": 5,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x282BedFa911E59BbCce7E345528E97fa7E55eb03",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000282bedfa911e59bbcce7e345528e97fa7e55eb03",
          "0xc70780814c756d46ee6d54af061aae7e39b1c7d42e371bcd0e985616b8708912"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x1ffa5ff8aa60d5982bd5d42ffd70a799ffb1ea4f2e7bb8c4ed2a7983902ac35d"
        ],
        "data": "0x000000000000000000000000282bedfa911e59bbcce7e345528e97fa7e55eb03",
        "logIndex": 8,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x22058D3E3D24124C046650094f55fCb87AC9cEf1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x282BedFa911E59BbCce7E345528E97fa7E55eb03",
        "topics": [
          "0x0a8bb31534c0ed46f380cb867bd5c803a189ced9a764e30b3a4991a9901d7474",
          "0x000000000000000000000000109b03b0470875310d2685822b95e108fb839d85"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
          "0xa097f6721ce401e757d1223a763fef49b8b5f90bb18567ddb86fd205dff71d34"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xdec08c9dbbdd0890e300eb5062089b2d4b1c40e3673bbccb5423f7b37dcf9a9c"
        ],
        "data": "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
        "logIndex": 12,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000022058d3e3d24124c046650094f55fcb87ac9cef1",
          "0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0xa097f6721ce401e757d1223a763fef49b8b5f90bb18567ddb86fd205dff71d34",
          "0xe5e14487b78f85faa6e1808e89246cf57dd34831548ff2e6097380d98db2504a"
        ],
        "data": "0x00000000000000000000000022058d3e3d24124c046650094f55fcb87ac9cef1",
        "logIndex": 14,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xad3c37868ae515dba167cae3a0604972edf91b84b773bb7f0d69e6c5bb930f59"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
          "0x00000000000000000000000069f7324c36f383451fb85f202d0dfbee00af0072",
          "0xad3c37868ae515dba167cae3a0604972edf91b84b773bb7f0d69e6c5bb930f59"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x329539a1d23af1810c48a07fe7fc66a3b34fbc8b37e9b3cdb97bb88ceab7e4bf"
        ],
        "data": "0x00000000000000000000000069f7324c36f383451fb85f202d0dfbee00af0072",
        "logIndex": 17,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa097f6721ce401e757d1223a763fef49b8b5f90bb18567ddb86fd205dff71d34"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
          "0x00000000000000000000000069f7324c36f383451fb85f202d0dfbee00af0072",
          "0xa097f6721ce401e757d1223a763fef49b8b5f90bb18567ddb86fd205dff71d34"
        ],
        "data": "0x",
        "logIndex": 19,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xdec08c9dbbdd0890e300eb5062089b2d4b1c40e3673bbccb5423f7b37dcf9a9c"
        ],
        "data": "0x00000000000000000000000069f7324c36f383451fb85f202d0dfbee00af0072",
        "logIndex": 20,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 21,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x6BE4c774e454Ea16dC24A67837A9142957c99386",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
          "0x00000000000000000000000069f7324c36f383451fb85f202d0dfbee00af0072",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x282BedFa911E59BbCce7E345528E97fa7E55eb03",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
          "0x00000000000000000000000069f7324c36f383451fb85f202d0dfbee00af0072"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10558727,
        "transactionHash": "0x4d2d9a7538a2766e530084c735bdd04ef4b4fc26e42bbab62b4c0d866a05bbdd",
        "address": "0x22058D3E3D24124C046650094f55fCb87AC9cEf1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000e423b964992b4e19afc09fd44fe5460d8835d093",
          "0x00000000000000000000000069f7324c36f383451fb85f202d0dfbee00af0072"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x5be8df46909ca3926cb0f5cbe8abfeb556ab2ae279e5051cf0c61f39694f1d0a"
      }
    ],
    "blockNumber": 10558727,
    "cumulativeGasUsed": "7562148",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7883dbc1a76445e721d6847459b742d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ADDR_LABEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESOLVER_LABEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVERSE_REGISTRAR_LABEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TLD_LABEL\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fifoRegistrarController\",\"outputs\":[{\"internalType\":\"contract FIFORegistrarController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"}],\"name\":\"namehash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"namehashDB\",\"outputs\":[{\"internalType\":\"contract NamehashDB\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicResolver\",\"outputs\":[{\"internalType\":\"contract KNSPublicResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"contract KNSRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract KNSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reverseRegistrar\",\"outputs\":[{\"internalType\":\"contract KNSReverseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Gilgames <gilgames@kuname.domains>\",\"kind\":\"dev\",\"methods\":{},\"title\":\"KNS Deployer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/KNSDeployer.sol\":\"KNSDeployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":666},\"remappings\":[]},\"sources\":{\"@ensdomains/buffer/contracts/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\\n\",\"keccak256\":\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\",\"license\":\"BSD-2-Clause\"},\"@ensdomains/ens-contracts/contracts/dnssec-oracle/BytesUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nlibrary BytesUtils {\\n    /*\\n    * @dev Returns the keccak-256 hash of a byte range.\\n    * @param self The byte string to hash.\\n    * @param offset The position to start hashing at.\\n    * @param len The number of bytes to hash.\\n    * @return The hash of the byte range.\\n    */\\n    function keccak(bytes memory self, uint offset, uint len) internal pure returns (bytes32 ret) {\\n        require(offset + len <= self.length);\\n        assembly {\\n            ret := keccak256(add(add(self, 32), offset), len)\\n        }\\n    }\\n\\n\\n    /*\\n    * @dev Returns a positive number if `other` comes lexicographically after\\n    *      `self`, a negative number if it comes before, or zero if the\\n    *      contents of the two bytes are equal.\\n    * @param self The first bytes to compare.\\n    * @param other The second bytes to compare.\\n    * @return The result of the comparison.\\n    */\\n    function compare(bytes memory self, bytes memory other) internal pure returns (int) {\\n        return compare(self, 0, self.length, other, 0, other.length);\\n    }\\n\\n    /*\\n    * @dev Returns a positive number if `other` comes lexicographically after\\n    *      `self`, a negative number if it comes before, or zero if the\\n    *      contents of the two bytes are equal. Comparison is done per-rune,\\n    *      on unicode codepoints.\\n    * @param self The first bytes to compare.\\n    * @param offset The offset of self.\\n    * @param len    The length of self.\\n    * @param other The second bytes to compare.\\n    * @param otheroffset The offset of the other string.\\n    * @param otherlen    The length of the other string.\\n    * @return The result of the comparison.\\n    */\\n    function compare(bytes memory self, uint offset, uint len, bytes memory other, uint otheroffset, uint otherlen) internal pure returns (int) {\\n        uint shortest = len;\\n        if (otherlen < len)\\n        shortest = otherlen;\\n\\n        uint selfptr;\\n        uint otherptr;\\n\\n        assembly {\\n            selfptr := add(self, add(offset, 32))\\n            otherptr := add(other, add(otheroffset, 32))\\n        }\\n        for (uint idx = 0; idx < shortest; idx += 32) {\\n            uint a;\\n            uint b;\\n            assembly {\\n                a := mload(selfptr)\\n                b := mload(otherptr)\\n            }\\n            if (a != b) {\\n                // Mask out irrelevant bytes and check again\\n                uint mask;\\n                if (shortest > 32) {\\n                    mask = type(uint256).max;\\n                } else {\\n                    mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);\\n                }\\n                int diff = int(a & mask) - int(b & mask);\\n                if (diff != 0)\\n                return diff;\\n            }\\n            selfptr += 32;\\n            otherptr += 32;\\n        }\\n\\n        return int(len) - int(otherlen);\\n    }\\n\\n    /*\\n    * @dev Returns true if the two byte ranges are equal.\\n    * @param self The first byte range to compare.\\n    * @param offset The offset into the first byte range.\\n    * @param other The second byte range to compare.\\n    * @param otherOffset The offset into the second byte range.\\n    * @param len The number of bytes to compare\\n    * @return True if the byte ranges are equal, false otherwise.\\n    */\\n    function equals(bytes memory self, uint offset, bytes memory other, uint otherOffset, uint len) internal pure returns (bool) {\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\n    }\\n\\n    /*\\n    * @dev Returns true if the two byte ranges are equal with offsets.\\n    * @param self The first byte range to compare.\\n    * @param offset The offset into the first byte range.\\n    * @param other The second byte range to compare.\\n    * @param otherOffset The offset into the second byte range.\\n    * @return True if the byte ranges are equal, false otherwise.\\n    */\\n    function equals(bytes memory self, uint offset, bytes memory other, uint otherOffset) internal pure returns (bool) {\\n        return keccak(self, offset, self.length - offset) == keccak(other, otherOffset, other.length - otherOffset);\\n    }\\n\\n    /*\\n    * @dev Compares a range of 'self' to all of 'other' and returns True iff\\n    *      they are equal.\\n    * @param self The first byte range to compare.\\n    * @param offset The offset into the first byte range.\\n    * @param other The second byte range to compare.\\n    * @return True if the byte ranges are equal, false otherwise.\\n    */\\n    function equals(bytes memory self, uint offset, bytes memory other) internal pure returns (bool) {\\n        return self.length >= offset + other.length && equals(self, offset, other, 0, other.length);\\n    }\\n\\n    /*\\n    * @dev Returns true if the two byte ranges are equal.\\n    * @param self The first byte range to compare.\\n    * @param other The second byte range to compare.\\n    * @return True if the byte ranges are equal, false otherwise.\\n    */\\n    function equals(bytes memory self, bytes memory other) internal pure returns(bool) {\\n        return self.length == other.length && equals(self, 0, other, 0, self.length);\\n    }\\n\\n    /*\\n    * @dev Returns the 8-bit number at the specified index of self.\\n    * @param self The byte string.\\n    * @param idx The index into the bytes\\n    * @return The specified 8 bits of the string, interpreted as an integer.\\n    */\\n    function readUint8(bytes memory self, uint idx) internal pure returns (uint8 ret) {\\n        return uint8(self[idx]);\\n    }\\n\\n    /*\\n    * @dev Returns the 16-bit number at the specified index of self.\\n    * @param self The byte string.\\n    * @param idx The index into the bytes\\n    * @return The specified 16 bits of the string, interpreted as an integer.\\n    */\\n    function readUint16(bytes memory self, uint idx) internal pure returns (uint16 ret) {\\n        require(idx + 2 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\n        }\\n    }\\n\\n    /*\\n    * @dev Returns the 32-bit number at the specified index of self.\\n    * @param self The byte string.\\n    * @param idx The index into the bytes\\n    * @return The specified 32 bits of the string, interpreted as an integer.\\n    */\\n    function readUint32(bytes memory self, uint idx) internal pure returns (uint32 ret) {\\n        require(idx + 4 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\n        }\\n    }\\n\\n    /*\\n    * @dev Returns the 32 byte value at the specified index of self.\\n    * @param self The byte string.\\n    * @param idx The index into the bytes\\n    * @return The specified 32 bytes of the string.\\n    */\\n    function readBytes32(bytes memory self, uint idx) internal pure returns (bytes32 ret) {\\n        require(idx + 32 <= self.length);\\n        assembly {\\n            ret := mload(add(add(self, 32), idx))\\n        }\\n    }\\n\\n    /*\\n    * @dev Returns the 32 byte value at the specified index of self.\\n    * @param self The byte string.\\n    * @param idx The index into the bytes\\n    * @return The specified 32 bytes of the string.\\n    */\\n    function readBytes20(bytes memory self, uint idx) internal pure returns (bytes20 ret) {\\n        require(idx + 20 <= self.length);\\n        assembly {\\n            ret := and(mload(add(add(self, 32), idx)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)\\n        }\\n    }\\n\\n    /*\\n    * @dev Returns the n byte value at the specified index of self.\\n    * @param self The byte string.\\n    * @param idx The index into the bytes.\\n    * @param len The number of bytes.\\n    * @return The specified 32 bytes of the string.\\n    */\\n    function readBytesN(bytes memory self, uint idx, uint len) internal pure returns (bytes32 ret) {\\n        require(len <= 32);\\n        require(idx + len <= self.length);\\n        assembly {\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\n            ret := and(mload(add(add(self, 32), idx)),  mask)\\n        }\\n    }\\n\\n    function memcpy(uint dest, uint src, uint len) private pure {\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n\\n    /*\\n    * @dev Copies a substring into a new byte string.\\n    * @param self The byte string to copy from.\\n    * @param offset The offset to start copying at.\\n    * @param len The number of bytes to copy.\\n    */\\n    function substring(bytes memory self, uint offset, uint len) internal pure returns(bytes memory) {\\n        require(offset + len <= self.length);\\n\\n        bytes memory ret = new bytes(len);\\n        uint dest;\\n        uint src;\\n\\n        assembly {\\n            dest := add(ret, 32)\\n            src := add(add(self, 32), offset)\\n        }\\n        memcpy(dest, src, len);\\n\\n        return ret;\\n    }\\n\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\n    // 0xFF represents invalid characters in that range.\\n    bytes constant base32HexTable = hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';\\n\\n    /**\\n     * @dev Decodes unpadded base32 data of up to one word in length.\\n     * @param self The data to decode.\\n     * @param off Offset into the string to start at.\\n     * @param len Number of characters to decode.\\n     * @return The decoded data, left aligned.\\n     */\\n    function base32HexDecodeWord(bytes memory self, uint off, uint len) internal pure returns(bytes32) {\\n        require(len <= 52);\\n\\n        uint ret = 0;\\n        uint8 decoded;\\n        for(uint i = 0; i < len; i++) {\\n            bytes1 char = self[off + i];\\n            require(char >= 0x30 && char <= 0x7A);\\n            decoded = uint8(base32HexTable[uint(uint8(char)) - 0x30]);\\n            require(decoded <= 0x20);\\n            if(i == len - 1) {\\n                break;\\n            }\\n            ret = (ret << 5) | decoded;\\n        }\\n\\n        uint bitlen = len * 5;\\n        if(len % 8 == 0) {\\n            // Multiple of 8 characters, no padding\\n            ret = (ret << 5) | decoded;\\n        } else if(len % 8 == 2) {\\n            // Two extra characters - 1 byte\\n            ret = (ret << 3) | (decoded >> 2);\\n            bitlen -= 2;\\n        } else if(len % 8 == 4) {\\n            // Four extra characters - 2 bytes\\n            ret = (ret << 1) | (decoded >> 4);\\n            bitlen -= 4;\\n        } else if(len % 8 == 5) {\\n            // Five extra characters - 3 bytes\\n            ret = (ret << 4) | (decoded >> 1);\\n            bitlen -= 1;\\n        } else if(len % 8 == 7) {\\n            // Seven extra characters - 4 bytes\\n            ret = (ret << 2) | (decoded >> 3);\\n            bitlen -= 3;\\n        } else {\\n            revert();\\n        }\\n\\n        return bytes32(ret << (256 - bitlen));\\n    }\\n}\",\"keccak256\":\"0x83315df2e54c74451577c70da2c267c3459802b08b9aeec6516302eee70f796e\"},\"@ensdomains/ens-contracts/contracts/dnssec-oracle/RRUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"./BytesUtils.sol\\\";\\nimport \\\"@ensdomains/buffer/contracts/Buffer.sol\\\";\\n\\n/**\\n* @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\n*/\\nlibrary RRUtils {\\n    using BytesUtils for *;\\n    using Buffer for *;\\n\\n    /**\\n    * @dev Returns the number of bytes in the DNS name at 'offset' in 'self'.\\n    * @param self The byte array to read a name from.\\n    * @param offset The offset to start reading at.\\n    * @return The length of the DNS name at 'offset', in bytes.\\n    */\\n    function nameLength(bytes memory self, uint offset) internal pure returns(uint) {\\n        uint idx = offset;\\n        while (true) {\\n            assert(idx < self.length);\\n            uint labelLen = self.readUint8(idx);\\n            idx += labelLen + 1;\\n            if (labelLen == 0) {\\n                break;\\n            }\\n        }\\n        return idx - offset;\\n    }\\n\\n    /**\\n    * @dev Returns a DNS format name at the specified offset of self.\\n    * @param self The byte array to read a name from.\\n    * @param offset The offset to start reading at.\\n    * @return ret The name.\\n    */\\n    function readName(bytes memory self, uint offset) internal pure returns(bytes memory ret) {\\n        uint len = nameLength(self, offset);\\n        return self.substring(offset, len);\\n    }\\n\\n    /**\\n    * @dev Returns the number of labels in the DNS name at 'offset' in 'self'.\\n    * @param self The byte array to read a name from.\\n    * @param offset The offset to start reading at.\\n    * @return The number of labels in the DNS name at 'offset', in bytes.\\n    */\\n    function labelCount(bytes memory self, uint offset) internal pure returns(uint) {\\n        uint count = 0;\\n        while (true) {\\n            assert(offset < self.length);\\n            uint labelLen = self.readUint8(offset);\\n            offset += labelLen + 1;\\n            if (labelLen == 0) {\\n                break;\\n            }\\n            count += 1;\\n        }\\n        return count;\\n    }\\n\\n    uint constant RRSIG_TYPE = 0;\\n    uint constant RRSIG_ALGORITHM = 2;\\n    uint constant RRSIG_LABELS = 3;\\n    uint constant RRSIG_TTL = 4;\\n    uint constant RRSIG_EXPIRATION = 8;\\n    uint constant RRSIG_INCEPTION = 12;\\n    uint constant RRSIG_KEY_TAG = 16;\\n    uint constant RRSIG_SIGNER_NAME = 18;\\n\\n    struct SignedSet {\\n        uint16 typeCovered;\\n        uint8 algorithm;\\n        uint8 labels;\\n        uint32 ttl;\\n        uint32 expiration;\\n        uint32 inception;\\n        uint16 keytag;\\n        bytes signerName;\\n        bytes data;\\n        bytes name;\\n    }\\n\\n    function readSignedSet(bytes memory data) internal pure returns(SignedSet memory self) {\\n        self.typeCovered = data.readUint16(RRSIG_TYPE);\\n        self.algorithm = data.readUint8(RRSIG_ALGORITHM);\\n        self.labels = data.readUint8(RRSIG_LABELS);\\n        self.ttl = data.readUint32(RRSIG_TTL);\\n        self.expiration = data.readUint32(RRSIG_EXPIRATION);\\n        self.inception = data.readUint32(RRSIG_INCEPTION);\\n        self.keytag = data.readUint16(RRSIG_KEY_TAG);\\n        self.signerName = readName(data, RRSIG_SIGNER_NAME);\\n        self.data = data.substring(RRSIG_SIGNER_NAME + self.signerName.length, data.length - RRSIG_SIGNER_NAME - self.signerName.length);\\n    }\\n\\n    function rrs(SignedSet memory rrset) internal pure returns(RRIterator memory) {\\n        return iterateRRs(rrset.data, 0);\\n    }\\n\\n    /**\\n    * @dev An iterator over resource records.\\n    */\\n    struct RRIterator {\\n        bytes data;\\n        uint offset;\\n        uint16 dnstype;\\n        uint16 class;\\n        uint32 ttl;\\n        uint rdataOffset;\\n        uint nextOffset;\\n    }\\n\\n    /**\\n    * @dev Begins iterating over resource records.\\n    * @param self The byte string to read from.\\n    * @param offset The offset to start reading at.\\n    * @return ret An iterator object.\\n    */\\n    function iterateRRs(bytes memory self, uint offset) internal pure returns (RRIterator memory ret) {\\n        ret.data = self;\\n        ret.nextOffset = offset;\\n        next(ret);\\n    }\\n\\n    /**\\n    * @dev Returns true iff there are more RRs to iterate.\\n    * @param iter The iterator to check.\\n    * @return True iff the iterator has finished.\\n    */\\n    function done(RRIterator memory iter) internal pure returns(bool) {\\n        return iter.offset >= iter.data.length;\\n    }\\n\\n    /**\\n    * @dev Moves the iterator to the next resource record.\\n    * @param iter The iterator to advance.\\n    */\\n    function next(RRIterator memory iter) internal pure {\\n        iter.offset = iter.nextOffset;\\n        if (iter.offset >= iter.data.length) {\\n            return;\\n        }\\n\\n        // Skip the name\\n        uint off = iter.offset + nameLength(iter.data, iter.offset);\\n\\n        // Read type, class, and ttl\\n        iter.dnstype = iter.data.readUint16(off);\\n        off += 2;\\n        iter.class = iter.data.readUint16(off);\\n        off += 2;\\n        iter.ttl = iter.data.readUint32(off);\\n        off += 4;\\n\\n        // Read the rdata\\n        uint rdataLength = iter.data.readUint16(off);\\n        off += 2;\\n        iter.rdataOffset = off;\\n        iter.nextOffset = off + rdataLength;\\n    }\\n\\n    /**\\n    * @dev Returns the name of the current record.\\n    * @param iter The iterator.\\n    * @return A new bytes object containing the owner name from the RR.\\n    */\\n    function name(RRIterator memory iter) internal pure returns(bytes memory) {\\n        return iter.data.substring(iter.offset, nameLength(iter.data, iter.offset));\\n    }\\n\\n    /**\\n    * @dev Returns the rdata portion of the current record.\\n    * @param iter The iterator.\\n    * @return A new bytes object containing the RR's RDATA.\\n    */\\n    function rdata(RRIterator memory iter) internal pure returns(bytes memory) {\\n        return iter.data.substring(iter.rdataOffset, iter.nextOffset - iter.rdataOffset);\\n    }\\n\\n    uint constant DNSKEY_FLAGS = 0;\\n    uint constant DNSKEY_PROTOCOL = 2;\\n    uint constant DNSKEY_ALGORITHM = 3;\\n    uint constant DNSKEY_PUBKEY = 4;\\n\\n    struct DNSKEY {\\n        uint16 flags;\\n        uint8 protocol;\\n        uint8 algorithm;\\n        bytes publicKey;\\n    }\\n\\n    function readDNSKEY(bytes memory data, uint offset, uint length) internal pure returns(DNSKEY memory self) {\\n        self.flags = data.readUint16(offset + DNSKEY_FLAGS);\\n        self.protocol = data.readUint8(offset + DNSKEY_PROTOCOL);\\n        self.algorithm = data.readUint8(offset + DNSKEY_ALGORITHM);\\n        self.publicKey = data.substring(offset + DNSKEY_PUBKEY, length - DNSKEY_PUBKEY);\\n    } \\n\\n    uint constant DS_KEY_TAG = 0;\\n    uint constant DS_ALGORITHM = 2;\\n    uint constant DS_DIGEST_TYPE = 3;\\n    uint constant DS_DIGEST = 4;\\n\\n    struct DS {\\n        uint16 keytag;\\n        uint8 algorithm;\\n        uint8 digestType;\\n        bytes digest;\\n    }\\n\\n    function readDS(bytes memory data, uint offset, uint length) internal pure returns(DS memory self) {\\n        self.keytag = data.readUint16(offset + DS_KEY_TAG);\\n        self.algorithm = data.readUint8(offset + DS_ALGORITHM);\\n        self.digestType = data.readUint8(offset + DS_DIGEST_TYPE);\\n        self.digest = data.substring(offset + DS_DIGEST, length - DS_DIGEST);\\n    }\\n\\n    struct NSEC3 {\\n        uint8 hashAlgorithm;\\n        uint8 flags;\\n        uint16 iterations;\\n        bytes salt;\\n        bytes32 nextHashedOwnerName;\\n        bytes typeBitmap;\\n    }\\n\\n    uint constant NSEC3_HASH_ALGORITHM = 0;\\n    uint constant NSEC3_FLAGS = 1;\\n    uint constant NSEC3_ITERATIONS = 2;\\n    uint constant NSEC3_SALT_LENGTH = 4;\\n    uint constant NSEC3_SALT = 5;\\n\\n    function readNSEC3(bytes memory data, uint offset, uint length) internal pure returns(NSEC3 memory self) {\\n        uint end = offset + length;\\n        self.hashAlgorithm = data.readUint8(offset + NSEC3_HASH_ALGORITHM);\\n        self.flags = data.readUint8(offset + NSEC3_FLAGS);\\n        self.iterations = data.readUint16(offset + NSEC3_ITERATIONS);\\n        uint8 saltLength = data.readUint8(offset + NSEC3_SALT_LENGTH);\\n        offset = offset + NSEC3_SALT;\\n        self.salt = data.substring(offset, saltLength);\\n        offset += saltLength;\\n        uint8 nextLength = data.readUint8(offset);\\n        require(nextLength <= 32);\\n        offset += 1;\\n        self.nextHashedOwnerName = data.readBytesN(offset, nextLength);\\n        offset += nextLength;\\n        self.typeBitmap = data.substring(offset, end - offset);\\n    }\\n\\n    function checkTypeBitmap(NSEC3 memory self, uint16 rrtype) internal pure returns(bool) {\\n        return checkTypeBitmap(self.typeBitmap, 0, rrtype);\\n    }\\n\\n    /**\\n    * @dev Checks if a given RR type exists in a type bitmap.\\n    * @param bitmap The byte string to read the type bitmap from.\\n    * @param offset The offset to start reading at.\\n    * @param rrtype The RR type to check for.\\n    * @return True if the type is found in the bitmap, false otherwise.\\n    */\\n    function checkTypeBitmap(bytes memory bitmap, uint offset, uint16 rrtype) internal pure returns (bool) {\\n        uint8 typeWindow = uint8(rrtype >> 8);\\n        uint8 windowByte = uint8((rrtype & 0xff) / 8);\\n        uint8 windowBitmask = uint8(uint8(1) << (uint8(7) - uint8(rrtype & 0x7)));\\n        for (uint off = offset; off < bitmap.length;) {\\n            uint8 window = bitmap.readUint8(off);\\n            uint8 len = bitmap.readUint8(off + 1);\\n            if (typeWindow < window) {\\n                // We've gone past our window; it's not here.\\n                return false;\\n            } else if (typeWindow == window) {\\n                // Check this type bitmap\\n                if (len <= windowByte) {\\n                    // Our type is past the end of the bitmap\\n                    return false;\\n                }\\n                return (bitmap.readUint8(off + windowByte + 2) & windowBitmask) != 0;\\n            } else {\\n                // Skip this type bitmap\\n                off += len + 2;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function compareNames(bytes memory self, bytes memory other) internal pure returns (int) {\\n        if (self.equals(other)) {\\n            return 0;\\n        }\\n\\n        uint off;\\n        uint otheroff;\\n        uint prevoff;\\n        uint otherprevoff;\\n        uint counts = labelCount(self, 0);\\n        uint othercounts = labelCount(other, 0);\\n\\n        // Keep removing labels from the front of the name until both names are equal length\\n        while (counts > othercounts) {\\n            prevoff = off;\\n            off = progress(self, off);\\n            counts--;\\n        }\\n\\n        while (othercounts > counts) {\\n            otherprevoff = otheroff;\\n            otheroff = progress(other, otheroff);\\n            othercounts--;\\n        }\\n\\n        // Compare the last nonequal labels to each other\\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\\n            prevoff = off;\\n            off = progress(self, off);\\n            otherprevoff = otheroff;\\n            otheroff = progress(other, otheroff);\\n            counts -= 1;\\n        }\\n\\n        if (off == 0) {\\n            return -1;\\n        }\\n        if(otheroff == 0) {\\n            return 1;\\n        }\\n\\n        return self.compare(prevoff + 1, self.readUint8(prevoff), other, otherprevoff + 1, other.readUint8(otherprevoff));\\n    }\\n\\n    /**\\n     * @dev Compares two serial numbers using RFC1982 serial number math.\\n     */\\n    function serialNumberGte(uint32 i1, uint32 i2) internal pure returns(bool) {\\n        return int32(i1) - int32(i2) >= 0;\\n    }\\n\\n    function progress(bytes memory body, uint off) internal pure returns(uint) {\\n        return off + 1 + body.readUint8(off);\\n    }\\n\\n    /**\\n     * @dev Computes the keytag for a chunk of data.\\n     * @param data The data to compute a keytag for.\\n     * @return The computed key tag.\\n     */\\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\\n        /* This function probably deserves some explanation.\\n         * The DNSSEC keytag function is a checksum that relies on summing up individual bytes\\n         * from the input string, with some mild bitshifting. Here's a Naive solidity implementation:\\n         *\\n         *     function computeKeytag(bytes memory data) internal pure returns (uint16) {\\n         *         uint ac;\\n         *         for (uint i = 0; i < data.length; i++) {\\n         *             ac += i & 1 == 0 ? uint16(data.readUint8(i)) << 8 : data.readUint8(i);\\n         *         }\\n         *         return uint16(ac + (ac >> 16));\\n         *     }\\n         *\\n         * The EVM, with its 256 bit words, is exceedingly inefficient at doing byte-by-byte operations;\\n         * the code above, on reasonable length inputs, consumes over 100k gas. But we can make the EVM's\\n         * large words work in our favour.\\n         *\\n         * The code below works by treating the input as a series of 256 bit words. It first masks out\\n         * even and odd bytes from each input word, adding them to two separate accumulators `ac1` and `ac2`.\\n         * The bytes are separated by empty bytes, so as long as no individual sum exceeds 2^16-1, we're\\n         * effectively summing 16 different numbers with each EVM ADD opcode.\\n         *\\n         * Once it's added up all the inputs, it has to add all the 16 bit values in `ac1` and `ac2` together.\\n         * It does this using the same trick - mask out every other value, shift to align them, add them together.\\n         * After the first addition on both accumulators, there's enough room to add the two accumulators together,\\n         * and the remaining sums can be done just on ac1.\\n         */\\n        unchecked {\\n            require(data.length <= 8192, \\\"Long keys not permitted\\\");\\n            uint ac1;\\n            uint ac2;\\n            for(uint i = 0; i < data.length + 31; i += 32) {\\n                uint word;\\n                assembly {\\n                    word := mload(add(add(data, 32), i))\\n                }\\n                if(i + 32 > data.length) {\\n                    uint unused = 256 - (data.length - i) * 8;\\n                    word = (word >> unused) << unused;\\n                }\\n                ac1 += (word & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8;\\n                ac2 += (word & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF);\\n            }\\n            ac1 = (ac1 & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\\n                + ((ac1 & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16);\\n            ac2 = (ac2 & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\\n                + ((ac2 & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16);\\n            ac1 = (ac1 << 8) + ac2;\\n            ac1 = (ac1 & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\\n                + ((ac1 & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32);\\n            ac1 = (ac1 & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\\n                + ((ac1 & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64);\\n            ac1 = (ac1 & 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                + (ac1 >> 128);\\n            ac1 += (ac1 >> 16) & 0xFFFF;\\n            return uint16(ac1);\\n        }\\n    }\\n}\",\"keccak256\":\"0x811642c86c539d645ef99a15fa1bf0eb4ce963cf1a618ef2a6f34d27a5e34030\"},\"@ensdomains/ens-contracts/contracts/registry/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(address owner, address resolver)\\n        external\\n        returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd6ba83973ffbab31dec17a716af3bb5703844d16dceb5078583fb2c509f8bcc2\"},\"@ensdomains/ens-contracts/contracts/resolvers/IMulticallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMulticallable {\\n    function multicall(bytes[] calldata data) external returns(bytes[] memory results);\\n}\\n\",\"keccak256\":\"0xb44d36fb6fe8e101d43f243cff1ce66b4093f942d60b89315d26ff218b97c2aa\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/ISupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) external pure returns(bool);\\n}\",\"keccak256\":\"0x4960422af4a3d38a2c440c656104465cba7dea0231cb7ae4a489a85dd65f645f\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/Multicallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IMulticallable.sol\\\";\\nimport \\\"./SupportsInterface.sol\\\";\\n\\nabstract contract Multicallable is IMulticallable, SupportsInterface {\\n    function multicall(bytes[] calldata data) external override returns(bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for(uint i = 0; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n            require(success);\\n            results[i] = result;\\n        }\\n        return results;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) public override virtual pure returns(bool) {\\n        return interfaceID == type(IMulticallable).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xf52d09d25a7ca8885486cfd8759b5af1aef95f9cfe5fa33affe19e66c31f1e15\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./SupportsInterface.sol\\\";\\n\\nabstract contract ResolverBase is SupportsInterface {\\n    function isAuthorised(bytes32 node) internal virtual view returns(bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xee4e3e99b515bdb2fc231c81fc6ff35cf09c3b57e9aaef538bfbb32f7c59248c\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/SupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ISupportsInterface.sol\\\";\\n\\nabstract contract SupportsInterface is ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(ISupportsInterface).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xcd27206ee8f8bd520d5441294f6438dde98f6933eb8801ee59a0155b8a8cde1b\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IABIResolver.sol\\\";\\nimport \\\"../ResolverBase.sol\\\";\\n\\nabstract contract ABIResolver is IABIResolver, ResolverBase {\\n    mapping(bytes32=>mapping(uint256=>bytes)) abis;\\n\\n    /**\\n     * Sets the ABI associated with an ENS node.\\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n     * the empty string.\\n     * @param node The node to update.\\n     * @param contentType The content type of the ABI\\n     * @param data The ABI data.\\n     */\\n    function setABI(bytes32 node, uint256 contentType, bytes calldata data) virtual external authorised(node) {\\n        // Content types must be powers of 2\\n        require(((contentType - 1) & contentType) == 0);\\n\\n        abis[node][contentType] = data;\\n        emit ABIChanged(node, contentType);\\n    }\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes) virtual override external view returns (uint256, bytes memory) {\\n        mapping(uint256=>bytes) storage abiset = abis[node];\\n\\n        for (uint256 contentType = 1; contentType <= contentTypes; contentType <<= 1) {\\n            if ((contentType & contentTypes) != 0 && abiset[contentType].length > 0) {\\n                return (contentType, abiset[contentType]);\\n            }\\n        }\\n\\n        return (0, bytes(\\\"\\\"));\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(IABIResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x6e82c80e281f572825bb1fd01f3235a16188f9d05d90a8d4f45996e6b01a3cea\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/AddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IAddrResolver.sol\\\";\\nimport \\\"./IAddressResolver.sol\\\";\\n\\nabstract contract AddrResolver is IAddrResolver, IAddressResolver, ResolverBase {\\n    uint constant private COIN_TYPE_ETH = 60;\\n\\n    mapping(bytes32=>mapping(uint=>bytes)) _addresses;\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param a The address to set.\\n     */\\n    function setAddr(bytes32 node, address a) virtual external authorised(node) {\\n        setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n    }\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) virtual override public view returns (address payable) {\\n        bytes memory a = addr(node, COIN_TYPE_ETH);\\n        if(a.length == 0) {\\n            return payable(0);\\n        }\\n        return bytesToAddress(a);\\n    }\\n\\n    function setAddr(bytes32 node, uint coinType, bytes memory a) virtual public authorised(node) {\\n        emit AddressChanged(node, coinType, a);\\n        if(coinType == COIN_TYPE_ETH) {\\n            emit AddrChanged(node, bytesToAddress(a));\\n        }\\n        _addresses[node][coinType] = a;\\n    }\\n\\n    function addr(bytes32 node, uint coinType) virtual override public view returns(bytes memory) {\\n        return _addresses[node][coinType];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(IAddrResolver).interfaceId || interfaceID == type(IAddressResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    function bytesToAddress(bytes memory b) internal pure returns(address payable a) {\\n        require(b.length == 20);\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12))\\n        }\\n    }\\n\\n    function addressToBytes(address a) internal pure returns(bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x356ed43442c7598b7489e1d1fef89f7b226e53c55e5cd319274b1fb7b7a81355\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IContentHashResolver.sol\\\";\\n\\nabstract contract ContentHashResolver is IContentHashResolver, ResolverBase {\\n    mapping(bytes32=>bytes) hashes;\\n\\n    /**\\n     * Sets the contenthash associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param hash The contenthash to set\\n     */\\n    function setContenthash(bytes32 node, bytes calldata hash) virtual external authorised(node) {\\n        hashes[node] = hash;\\n        emit ContenthashChanged(node, hash);\\n    }\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) virtual external override view returns (bytes memory) {\\n        return hashes[node];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(IContentHashResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x847444ea9a68e4e8344139502f348001961cb77958bc0d15fffeecbbd351cdf7\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/DNSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"../../dnssec-oracle/RRUtils.sol\\\";\\nimport \\\"./IDNSRecordResolver.sol\\\";\\nimport \\\"./IDNSZoneResolver.sol\\\";\\n\\nabstract contract DNSResolver is IDNSRecordResolver, IDNSZoneResolver, ResolverBase {\\n    using RRUtils for *;\\n    using BytesUtils for bytes;\\n\\n    // Zone hashes for the domains.\\n    // A zone hash is an EIP-1577 content hash in binary format that should point to a\\n    // resource containing a single zonefile.\\n    // node => contenthash\\n    mapping(bytes32=>bytes) private zonehashes;\\n\\n    // Version the mapping for each zone.  This allows users who have lost\\n    // track of their entries to effectively delete an entire zone by bumping\\n    // the version number.\\n    // node => version\\n    mapping(bytes32=>uint256) private versions;\\n\\n    // The records themselves.  Stored as binary RRSETs\\n    // node => version => name => resource => data\\n    mapping(bytes32=>mapping(uint256=>mapping(bytes32=>mapping(uint16=>bytes)))) private records;\\n\\n    // Count of number of entries for a given name.  Required for DNS resolvers\\n    // when resolving wildcards.\\n    // node => version => name => number of records\\n    mapping(bytes32=>mapping(uint256=>mapping(bytes32=>uint16))) private nameEntriesCount;\\n\\n    /**\\n     * Set one or more DNS records.  Records are supplied in wire-format.\\n     * Records with the same node/name/resource must be supplied one after the\\n     * other to ensure the data is updated correctly. For example, if the data\\n     * was supplied:\\n     *     a.example.com IN A 1.2.3.4\\n     *     a.example.com IN A 5.6.7.8\\n     *     www.example.com IN CNAME a.example.com.\\n     * then this would store the two A records for a.example.com correctly as a\\n     * single RRSET, however if the data was supplied:\\n     *     a.example.com IN A 1.2.3.4\\n     *     www.example.com IN CNAME a.example.com.\\n     *     a.example.com IN A 5.6.7.8\\n     * then this would store the first A record, the CNAME, then the second A\\n     * record which would overwrite the first.\\n     *\\n     * @param node the namehash of the node for which to set the records\\n     * @param data the DNS wire format records to set\\n     */\\n    function setDNSRecords(bytes32 node, bytes calldata data) virtual external authorised(node) {\\n        uint16 resource = 0;\\n        uint256 offset = 0;\\n        bytes memory name;\\n        bytes memory value;\\n        bytes32 nameHash;\\n        // Iterate over the data to add the resource records\\n        for (RRUtils.RRIterator memory iter = data.iterateRRs(0); !iter.done(); iter.next()) {\\n            if (resource == 0) {\\n                resource = iter.dnstype;\\n                name = iter.name();\\n                nameHash = keccak256(abi.encodePacked(name));\\n                value = bytes(iter.rdata());\\n            } else {\\n                bytes memory newName = iter.name();\\n                if (resource != iter.dnstype || !name.equals(newName)) {\\n                    setDNSRRSet(node, name, resource, data, offset, iter.offset - offset, value.length == 0);\\n                    resource = iter.dnstype;\\n                    offset = iter.offset;\\n                    name = newName;\\n                    nameHash = keccak256(name);\\n                    value = bytes(iter.rdata());\\n                }\\n            }\\n        }\\n        if (name.length > 0) {\\n            setDNSRRSet(node, name, resource, data, offset, data.length - offset, value.length == 0);\\n        }\\n    }\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(bytes32 node, bytes32 name, uint16 resource) virtual override public view returns (bytes memory) {\\n        return records[node][versions[node]][name][resource];\\n    }\\n\\n    /**\\n     * Check if a given node has records.\\n     * @param node the namehash of the node for which to check the records\\n     * @param name the namehash of the node for which to check the records\\n     */\\n    function hasDNSRecords(bytes32 node, bytes32 name) virtual public view returns (bool) {\\n        return (nameEntriesCount[node][versions[node]][name] != 0);\\n    }\\n\\n    /**\\n     * Clear all information for a DNS zone.\\n     * @param node the namehash of the node for which to clear the zone\\n     */\\n    function clearDNSZone(bytes32 node) virtual public authorised(node) {\\n        versions[node]++;\\n        emit DNSZoneCleared(node);\\n    }\\n\\n    /**\\n     * setZonehash sets the hash for the zone.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param hash The zonehash to set\\n     */\\n    function setZonehash(bytes32 node, bytes calldata hash) virtual external authorised(node) {\\n        bytes memory oldhash = zonehashes[node];\\n        zonehashes[node] = hash;\\n        emit DNSZonehashChanged(node, oldhash, hash);\\n    }\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) virtual override external view returns (bytes memory) {\\n        return zonehashes[node];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(IDNSRecordResolver).interfaceId ||\\n               interfaceID == type(IDNSZoneResolver).interfaceId ||\\n               super.supportsInterface(interfaceID);\\n    }\\n\\n    function setDNSRRSet(\\n        bytes32 node,\\n        bytes memory name,\\n        uint16 resource,\\n        bytes memory data,\\n        uint256 offset,\\n        uint256 size,\\n        bool deleteRecord) private\\n    {\\n        uint256 version = versions[node];\\n        bytes32 nameHash = keccak256(name);\\n        bytes memory rrData = data.substring(offset, size);\\n        if (deleteRecord) {\\n            if (records[node][version][nameHash][resource].length != 0) {\\n                nameEntriesCount[node][version][nameHash]--;\\n            }\\n            delete(records[node][version][nameHash][resource]);\\n            emit DNSRecordDeleted(node, name, resource);\\n        } else {\\n            if (records[node][version][nameHash][resource].length == 0) {\\n                nameEntriesCount[node][version][nameHash]++;\\n            }\\n            records[node][version][nameHash][resource] = rrData;\\n            emit DNSRecordChanged(node, name, resource, rrData);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x896227d68f2427c8f39dbd025f534563ede5dc9b3800095d7b5a7d0e7216c9ac\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IABIResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./IABIResolver.sol\\\";\\nimport \\\"../ResolverBase.sol\\\";\\n\\ninterface IABIResolver {\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes) external view returns (uint256, bytes memory);\\n}\\n\",\"keccak256\":\"0x37d037dd1cb59d7406ccd07d69e7206470c0aa3331c0efb92001769389bf4f2d\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\n}\\n\",\"keccak256\":\"0x20717682fa28eb1755a3b6ade738c8e0239c1cc393579058d4c3ffaca238c04b\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IContentHashResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IContentHashResolver {\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\n\\n    /**\\n     * Returns the contenthash associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xd95cd77684ba5752c428d7dceb4ecc6506ac94f4fbb910489637eb68dcd8e366\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSRecordResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSRecordResolver {\\n    // DNSRecordChanged is emitted whenever a given node/name/resource's RRSET is updated.\\n    event DNSRecordChanged(bytes32 indexed node, bytes name, uint16 resource, bytes record);\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource's RRSET is deleted.\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\n    // DNSZoneCleared is emitted whenever a given node's zone information is cleared.\\n    event DNSZoneCleared(bytes32 indexed node);\\n\\n    /**\\n     * Obtain a DNS record.\\n     * @param node the namehash of the node for which to fetch the record\\n     * @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\n     * @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\n     * @return the DNS record in wire format if present, otherwise empty\\n     */\\n    function dnsRecord(bytes32 node, bytes32 name, uint16 resource) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x640992fd5ad915a67712e2343ea0b8c5c0b88ea2646ff6bb713d448bef6ebfb5\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IDNSZoneResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IDNSZoneResolver {\\n    // DNSZonehashChanged is emitted whenever a given node's zone hash is updated.\\n    event DNSZonehashChanged(bytes32 indexed node, bytes lastzonehash, bytes zonehash);\\n\\n    /**\\n     * zonehash obtains the hash for the zone.\\n     * @param node The ENS node to query.\\n     * @return The associated contenthash.\\n     */\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x3b3ca51ab4dcc4eee417bf1ffa54e10d9cf6a30d8f0e3722915965b06355ecb4\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IInterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IInterfaceResolver {\\n    event InterfaceChanged(bytes32 indexed node, bytes4 indexed interfaceID, address implementer);\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc2673ebfb678b4c2730bff0434daf3a974d9ee0696c4adf533b41802f291745d\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IPubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface IPubkeyResolver {\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\n}\\n\",\"keccak256\":\"0x69748947093dd2fda9ddcebd0adf19a6d1e7600df1d4b1462a0417156caddca7\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ITextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ITextResolver {\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string calldata key) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x36a6602f2d76f373c5e1dcded0c87e1d3ab5180dbbbea7aa2a8d0e9a36273e38\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/InterfaceResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"../ISupportsInterface.sol\\\";\\nimport \\\"./AddrResolver.sol\\\";\\nimport \\\"./IInterfaceResolver.sol\\\";\\n\\nabstract contract InterfaceResolver is IInterfaceResolver, AddrResolver {\\n    mapping(bytes32=>mapping(bytes4=>address)) interfaces;\\n\\n    /**\\n     * Sets an interface associated with a name.\\n     * Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\n     * @param node The node to update.\\n     * @param interfaceID The EIP 165 interface ID.\\n     * @param implementer The address of a contract that implements this interface for this node.\\n     */\\n    function setInterface(bytes32 node, bytes4 interfaceID, address implementer) virtual external authorised(node) {\\n        interfaces[node][interfaceID] = implementer;\\n        emit InterfaceChanged(node, interfaceID, implementer);\\n    }\\n\\n    /**\\n     * Returns the address of a contract that implements the specified interface for this name.\\n     * If an implementer has not been set for this interfaceID and name, the resolver will query\\n     * the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\n     * contract implements EIP165 and returns `true` for the specified interfaceID, its address\\n     * will be returned.\\n     * @param node The ENS node to query.\\n     * @param interfaceID The EIP 165 interface ID to check for.\\n     * @return The address that implements this interface, or 0 if the interface is unsupported.\\n     */\\n    function interfaceImplementer(bytes32 node, bytes4 interfaceID) virtual override external view returns (address) {\\n        address implementer = interfaces[node][interfaceID];\\n        if(implementer != address(0)) {\\n            return implementer;\\n        }\\n\\n        address a = addr(node);\\n        if(a == address(0)) {\\n            return address(0);\\n        }\\n\\n        (bool success, bytes memory returnData) = a.staticcall(abi.encodeWithSignature(\\\"supportsInterface(bytes4)\\\", type(ISupportsInterface).interfaceId));\\n        if(!success || returnData.length < 32 || returnData[31] == 0) {\\n            // EIP 165 not supported by target\\n            return address(0);\\n        }\\n\\n        (success, returnData) = a.staticcall(abi.encodeWithSignature(\\\"supportsInterface(bytes4)\\\", interfaceID));\\n        if(!success || returnData.length < 32 || returnData[31] == 0) {\\n            // Specified interface not supported by target\\n            return address(0);\\n        }\\n\\n        return a;\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(IInterfaceResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xb738598e3354a259a2ab3dbd44c0b6dd6296f2b1322fb497e02d29410264a835\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/NameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./INameResolver.sol\\\";\\n\\nabstract contract NameResolver is INameResolver, ResolverBase {\\n    mapping(bytes32=>string) names;\\n\\n    /**\\n     * Sets the name associated with an ENS node, for reverse records.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     */\\n    function setName(bytes32 node, string calldata newName) virtual external authorised(node) {\\n        names[node] = newName;\\n        emit NameChanged(node, newName);\\n    }\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) virtual override external view returns (string memory) {\\n        return names[node];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(INameResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x06906b771f7b926283a1bce5f6252d9f551470867b8bb0e5a3defc7ce3106dec\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/PubkeyResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IPubkeyResolver.sol\\\";\\n\\nabstract contract PubkeyResolver is IPubkeyResolver, ResolverBase {\\n    struct PublicKey {\\n        bytes32 x;\\n        bytes32 y;\\n    }\\n\\n    mapping(bytes32=>PublicKey) pubkeys;\\n\\n    /**\\n     * Sets the SECP256k1 public key associated with an ENS node.\\n     * @param node The ENS node to query\\n     * @param x the X coordinate of the curve point for the public key.\\n     * @param y the Y coordinate of the curve point for the public key.\\n     */\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) virtual external authorised(node) {\\n        pubkeys[node] = PublicKey(x, y);\\n        emit PubkeyChanged(node, x, y);\\n    }\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x The X coordinate of the curve point for the public key.\\n     * @return y The Y coordinate of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) virtual override external view returns (bytes32 x, bytes32 y) {\\n        return (pubkeys[node].x, pubkeys[node].y);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(IPubkeyResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x6f00f7817ac83e6c9be9b4a17c981477f8a7d354a5e8cf19e5ffb6e26de5e213\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/TextResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./ITextResolver.sol\\\";\\n\\nabstract contract TextResolver is ITextResolver, ResolverBase {\\n    mapping(bytes32=>mapping(string=>string)) texts;\\n\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(bytes32 node, string calldata key, string calldata value) virtual external authorised(node) {\\n        texts[node][key] = value;\\n        emit TextChanged(node, key, key);\\n    }\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string calldata key) virtual override external view returns (string memory) {\\n        return texts[node][key];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(ITextResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x9a730678f529d8f10d6cb7aa1357374aac104a0e3a33868e8689c6359dad8b71\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0x0c364a5b65b6fff279adbe1fd6498c488feabeec781599cd60a5844e80ee7d88\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x9cca30a45c255977d8592f8ff1b5c373ded05ab4e4cd115a76799a25a3122e95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x23c3002abdabe203c93deb5ed6b1d9a4ee4d7a0313bb98b5d38da495068e0246\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb0308d8c5873c6e6c9a712669d33f77f3eb04dfbd3559ed901fa8d799673d176\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/FIFORegistrarController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\nimport { NameRegistrar } from \\\"./interfaces/NameRegistrar.sol\\\";\\nimport { Strings } from \\\"./libraries/Strings.sol\\\";\\n\\nerror UnavailableName();\\n\\ncontract FIFORegistrarController {\\n    using Strings for string;\\n\\n    NameRegistrar public immutable registrar;\\n\\n    constructor(NameRegistrar _registrar) {\\n        registrar = _registrar;\\n    }\\n\\n    function valid(string memory name) public pure returns (bool) {\\n        return name.strlen() >= 0;\\n    }\\n\\n    function available(string memory name) public view returns (bool) {\\n        return valid(name) && registrar.available(name);\\n    }\\n\\n    function register(string calldata name, address owner) public {\\n        if (!available(name)) {\\n            revert UnavailableName();\\n        }\\n\\n        registrar.register(name, owner);\\n    }\\n}\\n\",\"keccak256\":\"0xf8d7d965d7163bed3fdf7033f28d923e9774388a8a2b0dcc1ea7a624d29a8b55\",\"license\":\"AGPL-3.0-only\"},\"src/KNSDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\nimport { KNSRegistrar } from \\\"./KNSRegistrar.sol\\\";\\nimport { KNSRegistry } from \\\"./KNSRegistry.sol\\\";\\nimport { KNSPublicResolver, NameResolver } from \\\"./KNSPublicResolver.sol\\\";\\nimport { KNSReverseRegistrar } from \\\"./KNSReverseRegistrar.sol\\\";\\nimport { OnChainNamehashDB, NamehashDB } from \\\"./OnChainNamehashDB.sol\\\";\\nimport { FIFORegistrarController } from \\\"./FIFORegistrarController.sol\\\";\\n\\n/// @title KNS Deployer\\n/// @author Gilgames <gilgames@kuname.domains>\\ncontract KNSDeployer {\\n    bytes32 public constant TLD_LABEL = keccak256(\\\"kcc\\\");\\n    bytes32 public constant RESOLVER_LABEL = keccak256(\\\"resolver\\\");\\n    bytes32 public constant REVERSE_REGISTRAR_LABEL = keccak256(\\\"reverse\\\");\\n    bytes32 public constant ADDR_LABEL = keccak256(\\\"addr\\\");\\n\\n    KNSRegistry public registry;\\n    KNSRegistrar public registrar;\\n    KNSReverseRegistrar public reverseRegistrar;\\n    KNSPublicResolver public publicResolver;\\n    NamehashDB public namehashDB;\\n    FIFORegistrarController public fifoRegistrarController;\\n\\n    function namehash(bytes32 node, bytes32 label) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(node, label));\\n    }\\n\\n    constructor() {\\n        registry = new KNSRegistry();\\n        publicResolver = new KNSPublicResolver(registry);\\n\\n        bytes32 resolverNode = namehash(bytes32(0), RESOLVER_LABEL);\\n\\n        registry.setSubnodeOwner(bytes32(0), RESOLVER_LABEL, address(this));\\n        registry.setResolver(resolverNode, address(publicResolver));\\n        publicResolver.setAddr(resolverNode, address(publicResolver));\\n\\n        namehashDB = new OnChainNamehashDB();\\n        registrar = new KNSRegistrar(registry, namehashDB, namehash(bytes32(0), TLD_LABEL));\\n        registry.setSubnodeOwner(bytes32(0), TLD_LABEL, address(registrar));\\n\\n        reverseRegistrar = new KNSReverseRegistrar(registry, NameResolver(address(publicResolver)));\\n\\n        fifoRegistrarController = new FIFORegistrarController(registrar);\\n        registrar.addController(address(fifoRegistrarController));\\n\\n        registry.setSubnodeOwner(bytes32(0), REVERSE_REGISTRAR_LABEL, address(this));\\n        registry.setSubnodeOwner(namehash(bytes32(0), REVERSE_REGISTRAR_LABEL), ADDR_LABEL, address(reverseRegistrar));\\n\\n        registry.setSubnodeOwner(bytes32(0), RESOLVER_LABEL, msg.sender);\\n        registry.setSubnodeOwner(bytes32(0), REVERSE_REGISTRAR_LABEL, msg.sender);\\n        registry.setOwner(bytes32(0), msg.sender);\\n\\n        registrar.transferOwnership(msg.sender);\\n        reverseRegistrar.transferOwnership(msg.sender);\\n\\n        namehashDB.store(bytes32(0), \\\"kcc\\\");\\n        namehashDB.store(bytes32(0), \\\"resolver\\\");\\n        namehashDB.store(bytes32(0), \\\"reverse\\\");\\n        namehashDB.store(namehash(bytes32(0), \\\"reverse\\\"), \\\"addr\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1f77db9c69f6fe235db75daaaf7649ea063161999917f70d9f6e15f1e0905326\",\"license\":\"AGPL-3.0-only\"},\"src/KNSPublicResolver.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\nimport { NameRegistry } from \\\"./interfaces/NameRegistry.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ABIResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/AddrResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/ContentHashResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/DNSResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/InterfaceResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/NameResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/PubkeyResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/TextResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/Multicallable.sol\\\";\\n\\n/// @title KNS Public Resolver\\n/// @author Gilgames <gilgames@kuname.domains>\\n/// @notice This contract is a derivative work of the ENS Public Resolver.\\n///         The only difference is that the original contract supported a name\\n///         wrapping system to treat names like NFTs, functionality that KNS\\n///         offers by default through the KNS Registry.\\ncontract KNSPublicResolver is\\n    Multicallable,\\n    ABIResolver,\\n    AddrResolver,\\n    ContentHashResolver,\\n    DNSResolver,\\n    InterfaceResolver,\\n    NameResolver,\\n    PubkeyResolver,\\n    TextResolver\\n{\\n    NameRegistry immutable registry;\\n\\n    /**\\n     * A mapping of operators. An address that is authorised for an address\\n     * may make any changes to the name that the owner could, but may not update\\n     * the set of authorisations.\\n     * (owner, operator) => approved\\n     */\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    constructor(NameRegistry _registry) {\\n        registry = _registry;\\n    }\\n\\n    function setApprovalForAll(address operator, bool approved) external {\\n        require(msg.sender != operator, \\\"PublicResolver: cannot set approval status for self\\\");\\n\\n        _operatorApprovals[msg.sender][operator] = approved;\\n        emit ApprovalForAll(msg.sender, operator, approved);\\n    }\\n\\n    function isApprovedForAll(address account, address operator) public view returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    function isAuthorised(bytes32 node) internal view override returns (bool) {\\n        address owner = registry.owner(node);\\n        return owner == msg.sender || isApprovedForAll(owner, msg.sender);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID)\\n        public\\n        pure\\n        override(\\n            Multicallable,\\n            ABIResolver,\\n            AddrResolver,\\n            ContentHashResolver,\\n            DNSResolver,\\n            InterfaceResolver,\\n            NameResolver,\\n            PubkeyResolver,\\n            TextResolver\\n        )\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x1cbb464c950636dd20f06bbbe03727b081cce0fc2995ff779de1a6b66e147ecc\",\"license\":\"AGPL-3.0-only\"},\"src/KNSRegistrar.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\nimport { NameRegistry } from \\\"./interfaces/NameRegistry.sol\\\";\\nimport { NameRegistrar } from \\\"./interfaces/NameRegistrar.sol\\\";\\nimport { NamehashDB } from \\\"./interfaces/NamehashDB.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror RegistrarNotLive();\\nerror Unauthorized();\\nerror UnavailableName();\\n\\n/// @title KNS Registrar\\n/// @author Gilgames <gilgames@kuname.domains>\\ncontract KNSRegistrar is NameRegistrar, Ownable {\\n    NameRegistry public registry;\\n    NamehashDB public namehashDB;\\n    bytes32 public rootNode;\\n    mapping(address => bool) public controllers;\\n\\n    constructor(\\n        NameRegistry _registry,\\n        NamehashDB _namehashDB,\\n        bytes32 _rootNode\\n    ) {\\n        registry = _registry;\\n        namehashDB = _namehashDB;\\n        rootNode = _rootNode;\\n    }\\n\\n    modifier onlyWhenLive() {\\n        if (registry.owner(rootNode) != address(this)) {\\n            revert RegistrarNotLive();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        if (!controllers[msg.sender]) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    function addController(address controller) external override onlyOwner {\\n        controllers[controller] = true;\\n        emit ControllerAdded(controller);\\n    }\\n\\n    function removeController(address controller) external override onlyOwner {\\n        controllers[controller] = false;\\n        emit ControllerRemoved(controller);\\n    }\\n\\n    function setResolver(address resolver) external override onlyOwner {\\n        registry.setResolver(rootNode, resolver);\\n    }\\n\\n    function setNamehashDB(NamehashDB _namehashDB) external onlyOwner {\\n        namehashDB = _namehashDB;\\n    }\\n\\n    function available(string calldata name) public view override returns (bool) {\\n        bytes32 node = keccak256(abi.encodePacked(rootNode, keccak256(abi.encodePacked(name))));\\n        return !registry.recordExists(node);\\n    }\\n\\n    function register(string calldata name, address owner) public onlyWhenLive onlyController returns (bytes32) {\\n        if (!available(name)) {\\n            revert UnavailableName();\\n        }\\n\\n        bytes32 hashedName = keccak256(abi.encodePacked(name));\\n        registry.setSubnodeOwner(rootNode, hashedName, owner);\\n\\n        namehashDB.store(rootNode, name);\\n\\n        emit NameRegistered(hashedName, owner);\\n\\n        return hashedName;\\n    }\\n}\\n\",\"keccak256\":\"0xb935b8ff51bb0ff124e2bf5c1a23e1f10d53db03e769dcb6e5eecb4aa1ff21bd\",\"license\":\"AGPL-3.0-only\"},\"src/KNSRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\nimport { NameRegistry } from \\\"./interfaces/NameRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\nerror Unauthorized();\\n\\n/// @title KNS Registry\\n/// @author Gilgames <gilgames@kuname.domains>\\n/// @notice This contract is inspired by the ENS registry, but it is designed\\n///         be compatible with the ERC721 standard out-of-the-box.\\ncontract KNSRegistry is NameRegistry, ERC721, ERC721Enumerable {\\n    struct Record {\\n        address resolver;\\n        uint64 ttl;\\n    }\\n\\n    mapping(bytes32 => Record) records;\\n\\n    // Permits modifications only by the owner of the specified node.\\n    modifier authorised(bytes32 node) {\\n        if (!_isApprovedOrOwner(_msgSender(), uint256(node))) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructs a new KNS registry.\\n     */\\n    constructor() ERC721(\\\"KCC Name Service Domains\\\", \\\"KNSD\\\") {\\n        _mint(_msgSender(), uint256(0x0));\\n    }\\n\\n    /**\\n     * @dev Sets the record for a node.\\n     * @param node The node to update.\\n     * @param _owner The address of the new owner.\\n     * @param _resolver The address of the resolver.\\n     * @param _ttl The TTL in seconds.\\n     */\\n    function setRecord(\\n        bytes32 node,\\n        address _owner,\\n        address _resolver,\\n        uint64 _ttl\\n    ) external virtual {\\n        setOwner(node, _owner);\\n        _setResolverAndTTL(node, _resolver, _ttl);\\n    }\\n\\n    /**\\n     * @dev Sets the record for a subnode.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param _owner The address of the new owner.\\n     * @param _resolver The address of the resolver.\\n     * @param _ttl The TTL in seconds.\\n     */\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address _owner,\\n        address _resolver,\\n        uint64 _ttl\\n    ) external virtual {\\n        bytes32 subnode = setSubnodeOwner(node, label, _owner);\\n        _setResolverAndTTL(subnode, _resolver, _ttl);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of a node to a new address. May only be called by the current owner of the node.\\n     * @param node The node to transfer ownership of.\\n     * @param _owner The address of the new owner.\\n     */\\n    function setOwner(bytes32 node, address _owner) public virtual authorised(node) {\\n        uint256 nodeID = uint256(node);\\n        if (_owner == address(0)) {\\n            _burn(nodeID);\\n        } else {\\n            _transfer(owner(node), _owner, nodeID);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of a subnode keccak256(node, label) to a new address. May only be called by the owner of the parent node.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param _owner The address of the new owner.\\n     */\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address _owner\\n    ) public virtual authorised(node) returns (bytes32) {\\n        bytes32 subnode = keccak256(abi.encodePacked(node, label));\\n        uint256 subnodeID = uint256(subnode);\\n        // it will revert if node doesn't exists and _owner is 0\\n        if (!_exists(subnodeID)) {\\n            _mint(_owner, subnodeID);\\n        } else if (_owner == address(0)) {\\n            _burn(subnodeID);\\n        } else {\\n            _transfer(owner(subnode), _owner, subnodeID);\\n        }\\n        emit NewOwner(node, label, _owner);\\n        return subnode;\\n    }\\n\\n    /**\\n     * @dev Sets the resolver address for the specified node.\\n     * @param node The node to update.\\n     * @param _resolver The address of the resolver.\\n     */\\n    function setResolver(bytes32 node, address _resolver) public virtual authorised(node) {\\n        emit NewResolver(node, _resolver);\\n        records[node].resolver = _resolver;\\n    }\\n\\n    /**\\n     * @dev Sets the TTL for the specified node.\\n     * @param node The node to update.\\n     * @param _ttl The TTL in seconds.\\n     */\\n    function setTTL(bytes32 node, uint64 _ttl) public virtual authorised(node) {\\n        emit NewTTL(node, _ttl);\\n        records[node].ttl = _ttl;\\n    }\\n\\n    /**\\n     * @dev Returns the address that owns the specified node.\\n     * @param node The specified node.\\n     * @return address of the owner.\\n     */\\n    function owner(bytes32 node) public view virtual returns (address) {\\n        uint256 nodeID = uint256(node);\\n\\n        // ownerOf throws when the owner is the zero address, but we\\n        // want to return it instead, in order to comply with ENS\\n        if (!_exists(nodeID)) {\\n            return address(0x0);\\n        }\\n\\n        address addr = ownerOf(nodeID);\\n        if (addr == address(this)) {\\n            return address(0x0);\\n        }\\n\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the resolver for the specified node.\\n     * @param node The specified node.\\n     * @return address of the resolver.\\n     */\\n    function resolver(bytes32 node) public view virtual returns (address) {\\n        return records[node].resolver;\\n    }\\n\\n    /**\\n     * @dev Returns the TTL of a node, and any records associated with it.\\n     * @param node The specified node.\\n     * @return ttl of the node.\\n     */\\n    function ttl(bytes32 node) public view virtual returns (uint64) {\\n        return records[node].ttl;\\n    }\\n\\n    /**\\n     * @dev Returns whether a record has been imported to the registry.\\n     * @param node The specified node.\\n     * @return Bool if record exists\\n     */\\n    function recordExists(bytes32 node) public view virtual returns (bool) {\\n        return _exists(uint256(node));\\n    }\\n\\n    function _setResolverAndTTL(\\n        bytes32 node,\\n        address _resolver,\\n        uint64 _ttl\\n    ) internal {\\n        if (_resolver != records[node].resolver) {\\n            records[node].resolver = _resolver;\\n            emit NewResolver(node, _resolver);\\n        }\\n\\n        if (_ttl != records[node].ttl) {\\n            records[node].ttl = _ttl;\\n            emit NewTTL(node, _ttl);\\n        }\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(IERC165, ERC721, ERC721Enumerable)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x6f682b7be819a32b6d64c72a28a3713b580859f8f14c050480dad3d7c76c8527\",\"license\":\"AGPL-3.0-only\"},\"src/KNSReverseRegistrar.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\nimport { KNSRegistry } from \\\"./KNSRegistry.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/registry/IReverseRegistrar.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/NameResolver.sol\\\";\\nimport \\\"@ensdomains/ens-contracts/contracts/root/Controllable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nbytes32 constant lookup = 0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\nbytes32 constant ADDR_REVERSE_NODE = 0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2; // namehash('addr.reverse')\\n\\n/// @title KNS Reverse Registrar\\n/// @author Gilgames <gilgames@kuname.domains>\\n/// @notice This contract is a derivative work of the ENS Reverse Registrar.\\n///         The only difference is that the original contract supported a name\\n///         wrapping system to treat names like NFTs, functionality that KNS\\n///         offers by default through the KNS Registry.\\ncontract KNSReverseRegistrar is Ownable, Controllable, IReverseRegistrar {\\n    KNSRegistry public immutable registry;\\n    NameResolver public defaultResolver;\\n\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n\\n    /**\\n     * @dev Constructor\\n     * @param _registry The KNS registry.\\n     * @param _defaultResolver The default resolver that will be set for new\\n     *                         records created by the reverse registrar.\\n     */\\n    constructor(KNSRegistry _registry, NameResolver _defaultResolver) {\\n        registry = _registry;\\n        defaultResolver = _defaultResolver;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        KNSReverseRegistrar oldRegistrar = KNSReverseRegistrar(registry.owner(ADDR_REVERSE_NODE));\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    modifier authorised(address addr) {\\n        require(\\n            addr == msg.sender ||\\n                controllers[msg.sender] ||\\n                registry.isApprovedForAll(addr, msg.sender) ||\\n                ownsContract(addr),\\n            \\\"ReverseRegistrar: Caller is not a controller or authorised by address or the address itself\\\"\\n        );\\n        _;\\n    }\\n\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\n        require(address(resolver) != address(0), \\\"ReverseRegistrar: Resolver address must not be 0\\\");\\n        defaultResolver = NameResolver(resolver);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse KNS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in KNS.\\n     * @return The KNS node hash of the reverse record.\\n     */\\n    function claim(address owner) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, owner, address(defaultResolver));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse KNS record associated with the\\n     *      calling account.\\n     * @param addr The reverse record to set\\n     * @param owner The address to set as the owner of the reverse record in KNS.\\n     * @return The KNS node hash of the reverse record.\\n     */\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 labelHash = sha3HexAddress(addr);\\n        bytes32 reverseNode = keccak256(abi.encodePacked(ADDR_REVERSE_NODE, labelHash));\\n        emit ReverseClaimed(addr, reverseNode);\\n        registry.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the reverse KNS record associated with the\\n     *      calling account.\\n     * @param owner The address to set as the owner of the reverse record in KNS.\\n     * @param resolver The address of the resolver to set; 0 to leave unchanged.\\n     * @return The KNS node hash of the reverse record.\\n     */\\n    function claimWithResolver(address owner, address resolver) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, owner, resolver);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse KNS record associated with\\n     * the calling account. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * @param name The name to set for this address.\\n     * @return The KNS node hash of the reverse record.\\n     */\\n    function setName(string memory name) public override returns (bytes32) {\\n        return setNameForAddr(msg.sender, msg.sender, address(defaultResolver), name);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse KNS record associated with\\n     * the account provided. First updates the resolver to the default reverse\\n     * resolver if necessary.\\n     * Only callable by controllers and authorised users\\n     * @param addr The reverse record to set\\n     * @param owner The owner of the reverse node\\n     * @param name The name to set for this address.\\n     * @return The KNS node hash of the reverse record.\\n     */\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) public override returns (bytes32) {\\n        bytes32 _node = claimForAddr(addr, owner, resolver);\\n        NameResolver(resolver).setName(_node, name);\\n        return _node;\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The KNS node hash.\\n     */\\n    function node(address addr) public pure override returns (bytes32) {\\n        return keccak256(abi.encodePacked(ADDR_REVERSE_NODE, sha3HexAddress(addr)));\\n    }\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) private pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n\\n    function ownsContract(address addr) internal view returns (bool) {\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9540d62e3a580fe345a4fd44a35f357b6444f22986a0b90e5af361824bbadeb9\",\"license\":\"AGPL-3.0-only\"},\"src/OnChainNamehashDB.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\nimport { NamehashDB } from \\\"./interfaces/NamehashDB.sol\\\";\\n\\n/// @title On-Chain Namehash Database\\n/// @author Gilgames <gilgames@kuname.domains>\\n/// @notice A simple on-chain DB to store and lookup hashed KNS names.\\ncontract OnChainNamehashDB is NamehashDB {\\n    mapping(bytes32 => string) private names;\\n    mapping(bytes32 => bool) private exists;\\n\\n    function namehash(bytes32 node, bytes32 label) public pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(node, label));\\n    }\\n\\n    function _store(bytes32 node, string memory name) private {\\n        names[node] = name;\\n        exists[node] = true;\\n    }\\n\\n    function store(bytes32 node, string calldata label) external {\\n        bytes32 subnode = namehash(node, keccak256(abi.encodePacked(label)));\\n\\n        // if node is 0 then label is a tld, store it\\n        if (node == bytes32(0)) {\\n            _store(subnode, label);\\n            return;\\n        }\\n\\n        // if parent node doesn't exist in the db, do nothing\\n        if (exists[node] == false) {\\n            return;\\n        }\\n\\n        // if subnode already exists in db, do nothing\\n        if (bytes(names[subnode]).length != 0) {\\n            return;\\n        }\\n\\n        _store(subnode, string(abi.encodePacked(label, \\\".\\\", names[node])));\\n    }\\n\\n    function lookup(bytes32 nodehash) external view returns (string memory) {\\n        return names[nodehash];\\n    }\\n}\\n\",\"keccak256\":\"0x87cde379f70884022b659ce8e64063bcdadad6fbf91b2e30b1e1b3654e296e39\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/NameRegistrar.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\ninterface NameRegistrar {\\n    /**\\n     * @dev Emitted when a new controller is added.\\n     */\\n    event ControllerAdded(address indexed controller);\\n\\n    /**\\n     * @dev Emitted when a controller is removed.\\n     */\\n    event ControllerRemoved(address indexed controller);\\n\\n    /**\\n     * @dev Emitted upon name registration.\\n     */\\n    event NameRegistered(bytes32 indexed hashedName, address indexed owner);\\n\\n    /**\\n     * @dev Adds a controller that can register names.\\n     */\\n    function addController(address controller) external;\\n\\n    /**\\n     * @dev Removes a previously added controller.\\n     */\\n    function removeController(address controller) external;\\n\\n    /**\\n     * @dev Sets the resolver for the domain that this registrar manages.\\n     */\\n    function setResolver(address resolver) external;\\n\\n    /**\\n     * @dev Returns true iff the specified name is available for registration.\\n     */\\n    function available(string calldata name) external view returns (bool);\\n\\n    /**\\n     * @dev Registers a name.\\n     */\\n    function register(string calldata name, address owner) external returns (bytes32 hashedName);\\n}\\n\",\"keccak256\":\"0x8097740bccd45a7298b47ae5a6dbde991e9223f2137ec5c8ea0d4f760c6d48aa\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/NameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\ninterface NameRegistry is IERC721 {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2b50bf6e9fbf29824b7c0a19385a22172aa948cee14e13d3bb4d25f45aca0d76\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/NamehashDB.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\ninterface NamehashDB {\\n    /**\\n     * @dev Stores the hash and the full original name of a subnode from\\n     *      the hash of its node and the subnode label.\\n     * @param node The hash of the node parent of the subnode.\\n     * @param label The name of the subnode to be stored.\\n     */\\n    function store(bytes32 node, string calldata label) external;\\n\\n    /**\\n     * @dev Looks up the full original name of a node.\\n     * @param nodehash The hash of the node to lookup.\\n     * @return An empty string if the node is not in the DB, the name otherwise.\\n     */\\n    function lookup(bytes32 nodehash) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x06442eb99c8665cd0b833c5beffdfb01a099d03c38eaae59f88176989a0a2a62\",\"license\":\"AGPL-3.0-only\"},\"src/libraries/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary Strings {\\n    // Reference: https://ethereum.stackexchange.com/questions/13862/is-it-possible-to-check-string-variables-length-inside-the-contract/13886#13886\\n    function strlen(string memory str) internal pure returns (uint256 length) {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe10cbb81eb925cddba31d4b8eaaabe79b0d72801b8e2b2bb8aca0a7ce1bb9886\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620000209062000aee565b604051809103906000f0801580156200003d573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691821790556040516200006b9062000afc565b6001600160a01b039091168152602001604051809103906000f08015801562000098573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b039290921691909117905560408051600060208083018290526000805160206200852783398151915283850152835180840385018152606090930190935281519190920120600080546040516306ab592360e01b815260048101929092526000805160206200852783398151915260248301523060448301529192506001600160a01b03909116906306ab5923906064016020604051808303816000875af11580156200015f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000185919062000b42565b50600054600354604051630c4b7b8560e11b8152600481018490526001600160a01b039182166024820152911690631896f70a90604401600060405180830381600087803b158015620001d757600080fd5b505af1158015620001ec573d6000803e3d6000fd5b505060035460405162d5fa2b60e81b8152600481018590526001600160a01b0390911660248201819052925063d5fa2b009150604401600060405180830381600087803b1580156200023d57600080fd5b505af115801562000252573d6000803e3d6000fd5b50505050604051620002649062000b0a565b604051809103906000f08015801562000281573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b039283169081179091556000805460408051602080820194909452600080516020620085078339815191528183015281518082038301815260609091019091528051920191909120921691604051620002f09062000b18565b6001600160a01b0393841681529290911660208301526040820152606001604051809103906000f0801580156200032b573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b03928316908117909155600080546040516306ab592360e01b8152600481019290925260008051602062008507833981519152602483015260448201929092529116906306ab5923906064016020604051808303816000875af1158015620003ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003d3919062000b42565b506000546003546040516001600160a01b039283169290911690620003f89062000b26565b6001600160a01b03928316815291166020820152604001604051809103906000f0801580156200042c573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b039283161790556001546040519116906200045d9062000b34565b6001600160a01b039091168152602001604051809103906000f0801580156200048a573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392831690811790915560015460405163a7fc7a0760e01b815260048101929092529091169063a7fc7a0790602401600060405180830381600087803b158015620004ea57600080fd5b505af1158015620004ff573d6000803e3d6000fd5b5050600080546040516306ab592360e01b815260048101929092526000805160206200854783398151915260248301523060448301526001600160a01b031692506306ab592391506064016020604051808303816000875af11580156200056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000590919062000b42565b50600080546001600160a01b0316906306ab592390620005e69060008051602062008547833981519152604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b60025460405160e084901b6001600160e01b031916815260048101929092527fe5e14487b78f85faa6e1808e89246cf57dd34831548ff2e6097380d98db2504a60248301526001600160a01b031660448201526064016020604051808303816000875af11580156200065c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000682919062000b42565b50600080546040516306ab592360e01b815260048101929092526000805160206200852783398151915260248301523360448301526001600160a01b0316906306ab5923906064016020604051808303816000875af1158015620006ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000710919062000b42565b50600080546040516306ab592360e01b815260048101929092526000805160206200854783398151915260248301523360448301526001600160a01b0316906306ab5923906064016020604051808303816000875af115801562000778573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200079e919062000b42565b5060008054604051635b0fc9c360e01b815260048101929092523360248301526001600160a01b031690635b0fc9c390604401600060405180830381600087803b158015620007ec57600080fd5b505af115801562000801573d6000803e3d6000fd5b505060015460405163f2fde38b60e01b81523360048201526001600160a01b03909116925063f2fde38b9150602401600060405180830381600087803b1580156200084b57600080fd5b505af115801562000860573d6000803e3d6000fd5b505060025460405163f2fde38b60e01b81523360048201526001600160a01b03909116925063f2fde38b9150602401600060405180830381600087803b158015620008aa57600080fd5b505af1158015620008bf573d6000803e3d6000fd5b50506004805460408051639d105a2560e01b8152600093810193909352602483015260036044830152626b636360e81b60648301526001600160a01b03169250639d105a259150608401600060405180830381600087803b1580156200092457600080fd5b505af115801562000939573d6000803e3d6000fd5b50506004805460408051639d105a2560e01b8152600093810193909352602483015260086044830152673932b9b7b63b32b960c11b60648301526001600160a01b03169250639d105a259150608401600060405180830381600087803b158015620009a357600080fd5b505af1158015620009b8573d6000803e3d6000fd5b50506004805460408051639d105a2560e01b8152600093810193909352602483015260076044830152667265766572736560c81b60648301526001600160a01b03169250639d105a259150608401600060405180830381600087803b15801562000a2157600080fd5b505af115801562000a36573d6000803e3d6000fd5b505060048054604080516000602080830191909152667265766572736560c81b828401528251808303840181526060830180855281519190920120639d105a2560e01b9091526064820152608481019190915260a48101929092526330b2323960e11b60c48301526001600160a01b03169250639d105a25915060e401600060405180830381600087803b15801562000ace57600080fd5b505af115801562000ae3573d6000803e3d6000fd5b505050505062000b5c565b6127248062000e0583390190565b61268a806200352983390190565b6105c98062005bb383390190565b610c70806200617c83390190565b610ff68062006dec83390190565b6107258062007de283390190565b60006020828403121562000b5557600080fd5b5051919050565b6102998062000b6c6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80637b103999116100815780639368678f1161005b5780639368678f146101e0578063d1131c7214610207578063f82561211461022e57600080fd5b80637b103999146101935780637d70c659146101a657806380869853146101cd57600080fd5b80632b20e397116100b25780632b20e397146101465780632eb8221a146101595780635ecb25021461016c57600080fd5b80631d9273c7146100ce5780631f0fca471461011b575b600080fd5b6101086100dc366004610241565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6040519081526020015b60405180910390f35b60055461012e906001600160a01b031681565b6040516001600160a01b039091168152602001610112565b60015461012e906001600160a01b031681565b60045461012e906001600160a01b031681565b6101087f329539a1d23af1810c48a07fe7fc66a3b34fbc8b37e9b3cdb97bb88ceab7e4bf81565b60005461012e906001600160a01b031681565b6101087fdec08c9dbbdd0890e300eb5062089b2d4b1c40e3673bbccb5423f7b37dcf9a9c81565b60025461012e906001600160a01b031681565b6101087fe5e14487b78f85faa6e1808e89246cf57dd34831548ff2e6097380d98db2504a81565b6101087f1ffa5ff8aa60d5982bd5d42ffd70a799ffb1ea4f2e7bb8c4ed2a7983902ac35d81565b60035461012e906001600160a01b031681565b6000806040838503121561025457600080fd5b5050803592602090910135915056fea2646970667358221220731e485ad287133b26b5debc2a9902d99cc5a796fbe97cea8f0f3c9539a4d4fe64736f6c634300080d003360806040523480156200001157600080fd5b50604080518082018252601881527f4b4343204e616d65205365727669636520446f6d61696e73000000000000000060208083019182528351808501909452600484526312d394d160e21b908401528151919291620000739160009162000545565b5080516200008990600190602084019062000545565b505050620000a8620000a0620000ae60201b60201c565b6000620000b2565b6200069e565b3390565b6001600160a01b0382166200010e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064015b60405180910390fd5b6000818152600260205260409020546001600160a01b031615620001755760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000105565b62000183600083836200020c565b6001600160a01b0382166000908152600360205260408120805460019290620001ae90849062000601565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b620002248383836200022960201b62000e2f1760201c565b505050565b620002418383836200022460201b620007d71760201c565b6001600160a01b0383166200029f576200029981600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b620002c5565b816001600160a01b0316836001600160a01b031614620002c557620002c5838262000305565b6001600160a01b038216620002df576200022481620003b2565b826001600160a01b0316826001600160a01b03161462000224576200022482826200046c565b600060016200031f84620004bd60201b62000be61760201c565b6200032b91906200061c565b6000838152600760205260409020549091508082146200037f576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090620003c6906001906200061c565b60008381526009602052604081205460088054939450909284908110620003f157620003f162000636565b90600052602060002001549050806008838154811062000415576200041562000636565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806200045057620004506200064c565b6001900381819060005260206000200160009055905550505050565b60006200048483620004bd60201b62000be61760201c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60006001600160a01b038216620005295760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840162000105565b506001600160a01b031660009081526003602052604090205490565b828054620005539062000662565b90600052602060002090601f016020900481019282620005775760008555620005c2565b82601f106200059257805160ff1916838001178555620005c2565b82800160010185558215620005c2579182015b82811115620005c2578251825591602001919060010190620005a5565b50620005d0929150620005d4565b5090565b5b80821115620005d05760008155600101620005d5565b634e487b7160e01b600052601160045260246000fd5b60008219821115620006175762000617620005eb565b500190565b600082821015620006315762000631620005eb565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b600181811c908216806200067757607f821691505b6020821081036200069857634e487b7160e01b600052602260045260246000fd5b50919050565b61207680620006ae6000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806342842e0e116100ee57806395d89b4111610097578063c87b56dd11610071578063c87b56dd146103cb578063cf408823146103de578063e985e9c5146103f1578063f79fe5381461042d57600080fd5b806395d89b411461039d578063a22cb465146103a5578063b88d4fde146103b857600080fd5b80635ef2c7f0116100c85780635ef2c7f0146103645780636352211e1461037757806370a082311461038a57600080fd5b806342842e0e1461032b5780634f6ccce71461033e5780635b0fc9c31461035157600080fd5b8063095ea7b31161015b57806318160ddd1161013557806318160ddd146102ea5780631896f70a146102f257806323b872dd146103055780632f745c591461031857600080fd5b8063095ea7b31461027857806314ab90381461028d57806316a25cbd146102a057600080fd5b806306ab59231161018c57806306ab59231461022f57806306fdde0314610250578063081812fc1461026557600080fd5b80630178b8bf146101b357806301ffc9a7146101f957806302571be31461021c575b600080fd5b6101dc6101c1366004611ac7565b6000908152600a60205260409020546001600160a01b031690565b6040516001600160a01b0390911681526020015b60405180910390f35b61020c610207366004611af9565b610440565b60405190151581526020016101f0565b6101dc61022a366004611ac7565b610451565b61024261023d366004611b32565b6104a6565b6040519081526020016101f0565b61025861059b565b6040516101f09190611bbf565b6101dc610273366004611ac7565b61062d565b61028b610286366004611bd2565b6106c7565b005b61028b61029b366004611c14565b6107dc565b6102d16102ae366004611ac7565b6000908152600a6020526040902054600160a01b900467ffffffffffffffff1690565b60405167ffffffffffffffff90911681526020016101f0565b600854610242565b61028b610300366004611c40565b61087d565b61028b610313366004611c63565b610910565b610242610326366004611bd2565b61098a565b61028b610339366004611c63565b610a32565b61024261034c366004611ac7565b610a4d565b61028b61035f366004611c40565b610af1565b61028b610372366004611c9f565b610b4d565b6101dc610385366004611ac7565b610b6f565b610242610398366004611cf6565b610be6565b610258610c6c565b61028b6103b3366004611d11565b610c7b565b61028b6103c6366004611d63565b610c8a565b6102586103d9366004611ac7565b610d06565b61028b6103ec366004611e3f565b610dfb565b61020c6103ff366004611e8c565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61020c61043b366004611ac7565b610e10565b600061044b82610ee7565b92915050565b60008181526002602052604081205482906001600160a01b03166104785750600092915050565b600061048382610b6f565b9050306001600160a01b0382160361049f575060009392505050565b9392505050565b6000836104b4335b82610f0c565b6104d0576040516282b42960e81b815260040160405180910390fd5b60408051602080820188905281830187905282518083038401815260609092018352815191810191909120600081815260029092529190205481906001600160a01b0316610527576105228582611003565b610551565b6001600160a01b03851661053e5761052281611151565b61055161054a83610451565b86836111f8565b6040516001600160a01b0386168152869088907fce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e829060200160405180910390a35095945050505050565b6060600080546105aa90611eb6565b80601f01602080910402602001604051908101604052809291908181526020018280546105d690611eb6565b80156106235780601f106105f857610100808354040283529160200191610623565b820191906000526020600020905b81548152906001019060200180831161060657829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166106ab5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006106d282610b6f565b9050806001600160a01b0316836001600160a01b03160361073f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016106a2565b336001600160a01b038216148061075b575061075b81336103ff565b6107cd5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016106a2565b6107d7838361139f565b505050565b816107e6336104ae565b610802576040516282b42960e81b815260040160405180910390fd5b60405167ffffffffffffffff8316815283907f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa689060200160405180910390a2506000918252600a6020526040909120805467ffffffffffffffff909216600160a01b0267ffffffffffffffff60a01b19909216919091179055565b81610887336104ae565b6108a3576040516282b42960e81b815260040160405180910390fd5b6040516001600160a01b038316815283907f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a09060200160405180910390a2506000918252600a602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b610919336104ae565b61097f5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b60648201526084016106a2565b6107d78383836111f8565b600061099583610be6565b8210610a095760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201527f74206f6620626f756e647300000000000000000000000000000000000000000060648201526084016106a2565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6107d783838360405180602001604052806000815250610c8a565b6000610a5860085490565b8210610acc5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201527f7574206f6620626f756e6473000000000000000000000000000000000000000060648201526084016106a2565b60088281548110610adf57610adf611ef0565b90600052602060002001549050919050565b81610afb336104ae565b610b17576040516282b42960e81b815260040160405180910390fd5b826001600160a01b038316610b3457610b2f81611151565b610b47565b610b47610b4085610451565b84836111f8565b50505050565b6000610b5a8686866104a6565b9050610b6781848461140d565b505050505050565b6000818152600260205260408120546001600160a01b03168061044b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016106a2565b60006001600160a01b038216610c505760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016106a2565b506001600160a01b031660009081526003602052604090205490565b6060600180546105aa90611eb6565b610c8633838361152b565b5050565b610c943383610f0c565b610cfa5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b60648201526084016106a2565b610b47848484846115f9565b6000818152600260205260409020546060906001600160a01b0316610d935760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016106a2565b6000610daa60408051602081019091526000815290565b90506000815111610dca576040518060200160405280600081525061049f565b80610dd484611677565b604051602001610de5929190611f06565b6040516020818303038152906040529392505050565b610e058484610af1565b610b4784838361140d565b6000818152600260205260408120546001600160a01b0316151561044b565b6001600160a01b038316610e8a57610e8581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b610ead565b816001600160a01b0316836001600160a01b031614610ead57610ead8382611790565b6001600160a01b038216610ec4576107d78161182d565b826001600160a01b0316826001600160a01b0316146107d7576107d782826118dc565b60006001600160e01b0319821663780e9d6360e01b148061044b575061044b82611920565b6000818152600260205260408120546001600160a01b0316610f855760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016106a2565b6000610f9083610b6f565b9050806001600160a01b0316846001600160a01b03161480610fd757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610ffb5750836001600160a01b0316610ff08461062d565b6001600160a01b0316145b949350505050565b6001600160a01b0382166110595760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016106a2565b6000818152600260205260409020546001600160a01b0316156110be5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016106a2565b6110ca60008383611970565b6001600160a01b03821660009081526003602052604081208054600192906110f3908490611f4b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600061115c82610b6f565b905061116a81600084611970565b61117560008361139f565b6001600160a01b038116600090815260036020526040812080546001929061119e908490611f63565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b826001600160a01b031661120b82610b6f565b6001600160a01b03161461126f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b60648201526084016106a2565b6001600160a01b0382166112d15760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016106a2565b6112dc838383611970565b6112e760008261139f565b6001600160a01b0383166000908152600360205260408120805460019290611310908490611f63565b90915550506001600160a01b038216600090815260036020526040812080546001929061133e908490611f4b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906113d482610b6f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000838152600a60205260409020546001600160a01b0383811691161461148f576000838152600a602090815260409182902080546001600160a01b0319166001600160a01b038616908117909155915191825284917f335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0910160405180910390a25b6000838152600a602052604090205467ffffffffffffffff828116600160a01b90920416146107d7576000838152600a6020908152604091829020805467ffffffffffffffff60a01b1916600160a01b67ffffffffffffffff861690810291909117909155915191825284917f1d4f9bbfc9cab89d66e1a1562f2233ccbf1308cb4f63de2ead5787adddb8fa68910160405180910390a2505050565b816001600160a01b0316836001600160a01b03160361158c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016106a2565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6116048484846111f8565b6116108484848461197b565b610b475760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106a2565b60608160000361169e5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156116c857806116b281611f7a565b91506116c19050600a83611fa9565b91506116a2565b60008167ffffffffffffffff8111156116e3576116e3611d4d565b6040519080825280601f01601f19166020018201604052801561170d576020820181803683370190505b5090505b8415610ffb57611722600183611f63565b915061172f600a86611fbd565b61173a906030611f4b565b60f81b81838151811061174f5761174f611ef0565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611789600a86611fa9565b9450611711565b6000600161179d84610be6565b6117a79190611f63565b6000838152600760205260409020549091508082146117fa576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061183f90600190611f63565b6000838152600960205260408120546008805493945090928490811061186757611867611ef0565b90600052602060002001549050806008838154811061188857611888611ef0565b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806118c0576118c0611fd1565b6001900381819060005260206000200160009055905550505050565b60006118e783610be6565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60006001600160e01b031982166380ac58cd60e01b148061195157506001600160e01b03198216635b5e139f60e01b145b8061044b57506301ffc9a760e01b6001600160e01b031983161461044b565b6107d7838383610e2f565b60006001600160a01b0384163b15611abc57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906119bf903390899088908890600401611fe7565b6020604051808303816000875af19250505080156119fa575060408051601f3d908101601f191682019092526119f791810190612023565b60015b611aa2573d808015611a28576040519150601f19603f3d011682016040523d82523d6000602084013e611a2d565b606091505b508051600003611a9a5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016106a2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ffb565b506001949350505050565b600060208284031215611ad957600080fd5b5035919050565b6001600160e01b031981168114611af657600080fd5b50565b600060208284031215611b0b57600080fd5b813561049f81611ae0565b80356001600160a01b0381168114611b2d57600080fd5b919050565b600080600060608486031215611b4757600080fd5b8335925060208401359150611b5e60408501611b16565b90509250925092565b60005b83811015611b82578181015183820152602001611b6a565b83811115610b475750506000910152565b60008151808452611bab816020860160208601611b67565b601f01601f19169290920160200192915050565b60208152600061049f6020830184611b93565b60008060408385031215611be557600080fd5b611bee83611b16565b946020939093013593505050565b803567ffffffffffffffff81168114611b2d57600080fd5b60008060408385031215611c2757600080fd5b82359150611c3760208401611bfc565b90509250929050565b60008060408385031215611c5357600080fd5b82359150611c3760208401611b16565b600080600060608486031215611c7857600080fd5b611c8184611b16565b9250611c8f60208501611b16565b9150604084013590509250925092565b600080600080600060a08688031215611cb757600080fd5b8535945060208601359350611cce60408701611b16565b9250611cdc60608701611b16565b9150611cea60808701611bfc565b90509295509295909350565b600060208284031215611d0857600080fd5b61049f82611b16565b60008060408385031215611d2457600080fd5b611d2d83611b16565b915060208301358015158114611d4257600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611d7957600080fd5b611d8285611b16565b9350611d9060208601611b16565b925060408501359150606085013567ffffffffffffffff80821115611db457600080fd5b818701915087601f830112611dc857600080fd5b813581811115611dda57611dda611d4d565b604051601f8201601f19908116603f01168101908382118183101715611e0257611e02611d4d565b816040528281528a6020848701011115611e1b57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060008060808587031215611e5557600080fd5b84359350611e6560208601611b16565b9250611e7360408601611b16565b9150611e8160608601611bfc565b905092959194509250565b60008060408385031215611e9f57600080fd5b611ea883611b16565b9150611c3760208401611b16565b600181811c90821680611eca57607f821691505b602082108103611eea57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b60008351611f18818460208801611b67565b835190830190611f2c818360208801611b67565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611f5e57611f5e611f35565b500190565b600082821015611f7557611f75611f35565b500390565b600060018201611f8c57611f8c611f35565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611fb857611fb8611f93565b500490565b600082611fcc57611fcc611f93565b500690565b634e487b7160e01b600052603160045260246000fd5b60006001600160a01b038087168352808616602084015250836040830152608060608301526120196080830184611b93565b9695505050505050565b60006020828403121561203557600080fd5b815161049f81611ae056fea264697066735822122002f1f47ae7f08aff22c4fe62a60440d94b33f3ab457ca4aef713d98dfbbb6db064736f6c634300080d003360a06040523480156200001157600080fd5b506040516200268a3803806200268a833981016040819052620000349162000046565b6001600160a01b031660805262000078565b6000602082840312156200005957600080fd5b81516001600160a01b03811681146200007157600080fd5b9392505050565b6080516125f662000094600039600061147301526125f66000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806377372213116100ee578063bc1c58d111610097578063d5fa2b0011610071578063d5fa2b0014610403578063e59d895d14610416578063e985e9c514610429578063f1cb7e061461046557600080fd5b8063bc1c58d1146103a0578063c8690233146103b3578063ce3decdc146103f057600080fd5b8063a8fa5682116100c8578063a8fa56821461035a578063ac9650d81461036d578063ad5780af1461038d57600080fd5b806377372213146103215780638b95dd7114610334578063a22cb4651461034757600080fd5b8063304e6ade1161015b57806359d1d43c1161013557806359d1d43c146102c85780635c98042b146102e8578063623195b0146102fb578063691f34311461030e57600080fd5b8063304e6ade146102625780633b3b57de146102755780634cbf6ba41461028857600080fd5b8063124a319c1161018c578063124a319c146102035780632203ab561461022e57806329cd62ea1461024f57600080fd5b806301ffc9a7146101b35780630af179d7146101db57806310f13a8c146101f0575b600080fd5b6101c66101c1366004611e0e565b610478565b60405190151581526020015b60405180910390f35b6101ee6101e9366004611e6b565b610489565b005b6101ee6101fe366004611eb7565b610677565b610216610211366004611f31565b610724565b6040516001600160a01b0390911681526020016101d2565b61024161023c366004611f5d565b61098c565b6040516101d2929190611fdb565b6101ee61025d366004611ff4565b610aa7565b6101ee610270366004611e6b565b610b27565b610216610283366004612020565b610b86565b6101c6610296366004611f5d565b600091825260066020908152604080842060048352818520548552825280842092845291905290205461ffff16151590565b6102db6102d6366004611e6b565b610bb8565b6040516101d29190612039565b6102db6102f6366004612020565b610c7d565b6101ee61030936600461204c565b610d1f565b6102db61031c366004612020565b610da0565b6101ee61032f366004611e6b565b610dbd565b6101ee6103423660046120b5565b610e1c565b6101ee61035536600461218e565b610ee6565b6102db6103683660046121cc565b610fd4565b61038061037b36600461220c565b611017565b6040516101d29190612281565b6101ee61039b366004612020565b611132565b6102db6103ae366004612020565b611193565b6103db6103c1366004612020565b600090815260096020526040902080546001909101549091565b604080519283526020830191909152016101d2565b6101ee6103fe366004611e6b565b6111b0565b6101ee6104113660046122e3565b6112bc565b6101ee610424366004612308565b6112e3565b6101c661043736600461233d565b6001600160a01b039182166000908152600b6020908152604080832093909416825291909152205460ff1690565b6102db610473366004611f5d565b61137d565b60006104838261142b565b92915050565b8261049381611450565b61049c57600080fd5b6000806060806000806104e960008a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929392505061151e9050565b90505b80515160208201511015610612578561ffff1660000361055157806040015195506105168161157f565b935083604051602001610529919061236b565b60405160208183030381529060405280519060200120915061054a816115a0565b9250610604565b600061055c8261157f565b9050816040015161ffff168761ffff16141580610580575061057e85826115bc565b155b15610602576105db8b86898d8d8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505060208801518c91506105d390829061239d565b8a51156115da565b8160400151965081602001519550809450848051906020012092506105ff826115a0565b93505b505b61060d8161181d565b6104ec565b5082511561066c5761066c8984878b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b925061066491508290508e61239d565b8851156115da565b505050505050505050565b8461068181611450565b61068a57600080fd5b8282600a600089815260200190815260200160002087876040516106af9291906123b4565b9081526040519081900360200190206106c9929091611ca7565b5084846040516106da9291906123b4565b6040518091039020867fd8c9334b1a9c2f9da342a0a2b32629c1a229b6445dad78947f674b44444a755087876040516107149291906123ed565b60405180910390a3505050505050565b60008281526007602090815260408083206001600160e01b0319851684529091528120546001600160a01b0316801561075e579050610483565b600061076985610b86565b90506001600160a01b03811661078457600092505050610483565b6040516301ffc9a760e01b602482015260009081906001600160a01b0384169060440160408051601f198184030181529181526020820180516001600160e01b03166301ffc9a760e01b179052516107dc919061236b565b600060405180830381855afa9150503d8060008114610817576040519150601f19603f3d011682016040523d82523d6000602084013e61081c565b606091505b509150915081158061082f575060208151105b80610871575080601f8151811061084857610848612401565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b15610883576000945050505050610483565b6040516001600160e01b0319871660248201526001600160a01b0384169060440160408051601f198184030181529181526020820180516001600160e01b03166301ffc9a760e01b179052516108d9919061236b565b600060405180830381855afa9150503d8060008114610914576040519150601f19603f3d011682016040523d82523d6000602084013e610919565b606091505b50909250905081158061092d575060208151105b8061096f575080601f8151811061094657610946612401565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b15610981576000945050505050610483565b509095945050505050565b600082815260208190526040812060609060015b848111610a8757808516158015906109d05750600081815260208390526040812080546109cc90612417565b9050115b15610a7f57808260008381526020019081526020016000208080546109f490612417565b80601f0160208091040260200160405190810160405280929190818152602001828054610a2090612417565b8015610a6d5780601f10610a4257610100808354040283529160200191610a6d565b820191906000526020600020905b815481529060010190602001808311610a5057829003601f168201915b50505050509050935093505050610aa0565b60011b6109a0565b5060006040518060200160405280600081525092509250505b9250929050565b82610ab181611450565b610aba57600080fd5b60408051808201825284815260208082018581526000888152600983528490209251835551600190920191909155815185815290810184905285917f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e4691015b60405180910390a250505050565b82610b3181611450565b610b3a57600080fd5b6000848152600260205260409020610b53908484611ca7565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d75788484604051610b199291906123ed565b600080610b9483603c61137d565b90508051600003610ba85750600092915050565b610bb181611905565b9392505050565b6060600a60008581526020019081526020016000208383604051610bdd9291906123b4565b90815260200160405180910390208054610bf690612417565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2290612417565b8015610c6f5780601f10610c4457610100808354040283529160200191610c6f565b820191906000526020600020905b815481529060010190602001808311610c5257829003601f168201915b505050505090509392505050565b6000818152600360205260409020805460609190610c9a90612417565b80601f0160208091040260200160405190810160405280929190818152602001828054610cc690612417565b8015610d135780601f10610ce857610100808354040283529160200191610d13565b820191906000526020600020905b815481529060010190602001808311610cf657829003601f168201915b50505050509050919050565b83610d2981611450565b610d3257600080fd5b83610d3e60018261239d565b1615610d4957600080fd5b6000858152602081815260408083208784529091529020610d6b908484611ca7565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b6000818152600860205260409020805460609190610c9a90612417565b82610dc781611450565b610dd057600080fd5b6000848152600860205260409020610de9908484611ca7565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051610b199291906123ed565b82610e2681611450565b610e2f57600080fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af7528484604051610e61929190611fdb565b60405180910390a2603c8303610eb857837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd2610e9c84611905565b6040516001600160a01b03909116815260200160405180910390a25b600084815260016020908152604080832086845282529091208351610edf92850190611d2b565b5050505050565b6001600160a01b0382163303610f685760405162461bcd60e51b815260206004820152603360248201527f5075626c69635265736f6c7665723a2063616e6e6f742073657420617070726f60448201527f76616c2073746174757320666f722073656c6600000000000000000000000000606482015260840160405180910390fd5b336000818152600b602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000838152600560209081526040808320600483528184205484528252808320858452825280832061ffff851684529091529020805460609190610bf690612417565b60608167ffffffffffffffff8111156110325761103261209f565b60405190808252806020026020018201604052801561106557816020015b60608152602001906001900390816110505790505b50905060005b8281101561112b576000803086868581811061108957611089612401565b905060200281019061109b9190612451565b6040516110a99291906123b4565b600060405180830381855af49150503d80600081146110e4576040519150601f19603f3d011682016040523d82523d6000602084013e6110e9565b606091505b5091509150816110f857600080fd5b8084848151811061110b5761110b612401565b60200260200101819052505050808061112390612498565b91505061106b565b5092915050565b8061113c81611450565b61114557600080fd5b600082815260046020526040812080549161115f83612498565b909155505060405182907fb757169b8492ca2f1c6619d9d76ce22803035c3b1d5f6930dffe7b127c1a198390600090a25050565b6000818152600260205260409020805460609190610c9a90612417565b826111ba81611450565b6111c357600080fd5b600084815260036020526040812080546111dc90612417565b80601f016020809104026020016040519081016040528092919081815260200182805461120890612417565b80156112555780601f1061122a57610100808354040283529160200191611255565b820191906000526020600020905b81548152906001019060200180831161123857829003601f168201915b505050600088815260036020526040902092935061127892915086905085611ca7565b50847f8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f858286866040516112ad939291906124b1565b60405180910390a25050505050565b816112c681611450565b6112cf57600080fd5b6112de83603c6103428561192d565b505050565b826112ed81611450565b6112f657600080fd5b60008481526007602090815260408083206001600160e01b0319871680855290835292819020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038716908117909155905190815286917f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa910160405180910390a350505050565b600082815260016020908152604080832084845290915290208054606091906113a590612417565b80601f01602080910402602001604051908101604052809291908181526020018280546113d190612417565b801561141e5780601f106113f35761010080835404028352916020019161141e565b820191906000526020600020905b81548152906001019060200180831161140157829003601f168201915b5050505050905092915050565b60006001600160e01b03198216631674750f60e21b1480610483575061048382611966565b6040516302571be360e01b81526004810182905260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa1580156114ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114de91906124e1565b90506001600160a01b038116331480610bb157506001600160a01b0381166000908152600b6020908152604080832033845290915290205460ff16610bb1565b61156c6040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c081018290526104838161181d565b6020810151815160609161048391611597908261198b565b845191906119ed565b60a081015160c08201516060916104839161159790829061239d565b600081518351148015610bb15750610bb18360008460008751611a64565b600087815260046020908152604082205488519189019190912090916116018787876119ed565b9050831561170a5760008a81526005602090815260408083208684528252808320858452825280832061ffff8c1684529091529020805461164190612417565b1590506116955760008a815260066020908152604080832086845282528083208584529091528120805461ffff1691611679836124fe565b91906101000a81548161ffff021916908361ffff160217905550505b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c16845290915281206116cb91611d9f565b897f03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a12078a8a6040516116fd92919061251c565b60405180910390a2611811565b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c1684529091529020805461174290612417565b90506000036117985760008a815260066020908152604080832086845282528083208584529091528120805461ffff169161177c83612542565b91906101000a81548161ffff021916908361ffff160217905550505b60008a81526005602090815260408083208684528252808320858452825280832061ffff8c168452825290912082516117d392840190611d2b565b50897f52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b8a8a8460405161180893929190612563565b60405180910390a25b50505050505050505050565b60c081015160208201819052815151116118345750565b60006118488260000151836020015161198b565b82602001516118579190612592565b82519091506118669082611a87565b61ffff16604083015261187a600282612592565b82519091506118899082611a87565b61ffff16606083015261189d600282612592565b82519091506118ac9082611aaf565b63ffffffff1660808301526118c2600482612592565b82519091506000906118d49083611a87565b61ffff1690506118e5600283612592565b60a0840181905291506118f88183612592565b60c0909301929092525050565b6000815160141461191557600080fd5b50602001516c01000000000000000000000000900490565b6040805160148082528183019092526060916020820181803683375050506c010000000000000000000000009290920260208301525090565b60006001600160e01b0319821663c869023360e01b1480610483575061048382611ad9565b6000815b8351811061199f5761199f6125aa565b60006119ab8583611afe565b60ff1690506119bb816001612592565b6119c59083612592565b9150806000036119d557506119db565b5061198f565b6119e5838261239d565b949350505050565b82516060906119fc8385612592565b1115611a0757600080fd5b60008267ffffffffffffffff811115611a2257611a2261209f565b6040519080825280601f01601f191660200182016040528015611a4c576020820181803683370190505b50905060208082019086860101610981828287611b22565b6000611a71848484611b78565b611a7c878785611b78565b149695505050505050565b8151600090611a97836002612592565b1115611aa257600080fd5b50016002015161ffff1690565b8151600090611abf836004612592565b1115611aca57600080fd5b50016004015163ffffffff1690565b60006001600160e01b0319821663691f343160e01b1480610483575061048382611b9c565b6000828281518110611b1257611b12612401565b016020015160f81c905092915050565b60208110611b5a5781518352611b39602084612592565b9250611b46602083612592565b9150611b5360208261239d565b9050611b22565b905182516020929092036101000a6000190180199091169116179052565b8251600090611b878385612592565b1115611b9257600080fd5b5091016020012090565b60006001600160e01b031982166304928c6760e21b148061048357506104838260006001600160e01b0319821663547d2b4160e11b1480611bed57506001600160e01b03198216635c98042b60e01b145b8061048357506104838260006001600160e01b0319821663bc1c58d160e01b148061048357506104838260006001600160e01b03198216631d9dabef60e11b1480611c4857506001600160e01b031982166378e5bf0360e11b145b8061048357506104838260006001600160e01b03198216631101d5ab60e11b148061048357506104838260006001600160e01b03198216631592ca1b60e31b148061048357506301ffc9a760e01b6001600160e01b0319831614610483565b828054611cb390612417565b90600052602060002090601f016020900481019282611cd55760008555611d1b565b82601f10611cee5782800160ff19823516178555611d1b565b82800160010185558215611d1b579182015b82811115611d1b578235825591602001919060010190611d00565b50611d27929150611ddc565b5090565b828054611d3790612417565b90600052602060002090601f016020900481019282611d595760008555611d1b565b82601f10611d7257805160ff1916838001178555611d1b565b82800160010185558215611d1b579182015b82811115611d1b578251825591602001919060010190611d84565b508054611dab90612417565b6000825580601f10611dbb575050565b601f016020900490600052602060002090810190611dd99190611ddc565b50565b5b80821115611d275760008155600101611ddd565b80356001600160e01b031981168114611e0957600080fd5b919050565b600060208284031215611e2057600080fd5b610bb182611df1565b60008083601f840112611e3b57600080fd5b50813567ffffffffffffffff811115611e5357600080fd5b602083019150836020828501011115610aa057600080fd5b600080600060408486031215611e8057600080fd5b83359250602084013567ffffffffffffffff811115611e9e57600080fd5b611eaa86828701611e29565b9497909650939450505050565b600080600080600060608688031215611ecf57600080fd5b85359450602086013567ffffffffffffffff80821115611eee57600080fd5b611efa89838a01611e29565b90965094506040880135915080821115611f1357600080fd5b50611f2088828901611e29565b969995985093965092949392505050565b60008060408385031215611f4457600080fd5b82359150611f5460208401611df1565b90509250929050565b60008060408385031215611f7057600080fd5b50508035926020909101359150565b60005b83811015611f9a578181015183820152602001611f82565b83811115611fa9576000848401525b50505050565b60008151808452611fc7816020860160208601611f7f565b601f01601f19169290920160200192915050565b8281526040602082015260006119e56040830184611faf565b60008060006060848603121561200957600080fd5b505081359360208301359350604090920135919050565b60006020828403121561203257600080fd5b5035919050565b602081526000610bb16020830184611faf565b6000806000806060858703121561206257600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561208757600080fd5b61209387828801611e29565b95989497509550505050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156120ca57600080fd5b8335925060208401359150604084013567ffffffffffffffff808211156120f057600080fd5b818601915086601f83011261210457600080fd5b8135818111156121165761211661209f565b604051601f8201601f19908116603f0116810190838211818310171561213e5761213e61209f565b8160405282815289602084870101111561215757600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6001600160a01b0381168114611dd957600080fd5b600080604083850312156121a157600080fd5b82356121ac81612179565b9150602083013580151581146121c157600080fd5b809150509250929050565b6000806000606084860312156121e157600080fd5b8335925060208401359150604084013561ffff8116811461220157600080fd5b809150509250925092565b6000806020838503121561221f57600080fd5b823567ffffffffffffffff8082111561223757600080fd5b818501915085601f83011261224b57600080fd5b81358181111561225a57600080fd5b8660208260051b850101111561226f57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156122d657603f198886030184526122c4858351611faf565b945092850192908501906001016122a8565b5092979650505050505050565b600080604083850312156122f657600080fd5b8235915060208301356121c181612179565b60008060006060848603121561231d57600080fd5b8335925061232d60208501611df1565b9150604084013561220181612179565b6000806040838503121561235057600080fd5b823561235b81612179565b915060208301356121c181612179565b6000825161237d818460208701611f7f565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b6000828210156123af576123af612387565b500390565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6020815260006119e56020830184866123c4565b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061242b57607f821691505b60208210810361244b57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808335601e1984360301811261246857600080fd5b83018035915067ffffffffffffffff82111561248357600080fd5b602001915036819003821315610aa057600080fd5b6000600182016124aa576124aa612387565b5060010190565b6040815260006124c46040830186611faf565b82810360208401526124d78185876123c4565b9695505050505050565b6000602082840312156124f357600080fd5b8151610bb181612179565b600061ffff82168061251257612512612387565b6000190192915050565b60408152600061252f6040830185611faf565b905061ffff831660208301529392505050565b600061ffff80831681810361255957612559612387565b6001019392505050565b6060815260006125766060830186611faf565b61ffff8516602084015282810360408401526124d78185611faf565b600082198211156125a5576125a5612387565b500190565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220ada45dcd7c978cabcffd6edef532e07bb19a89be5ef3c3dc86b3eef5703499ec64736f6c634300080d0033608060405234801561001057600080fd5b506105a9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631d9273c7146100465780639d105a2514610093578063f39ec1f7146100a8575b600080fd5b610080610054366004610368565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6040519081526020015b60405180910390f35b6100a66100a136600461038a565b6100c8565b005b6100bb6100b6366004610406565b6101f0565b60405161008a919061041f565b600061011f8484846040516020016100e1929190610474565b60408051601f198184030181528282528051602091820120838201949094528282019390935280518083038201815260609092019052805191012090565b90508361016c576101668184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061029292505050565b50505050565b60008481526001602052604081205460ff161515900361018c5750505050565b600081815260208190526040902080546101a590610484565b1590506101b25750505050565b6101668184846000808981526020019081526020016000206040516020016101dc939291906104be565b604051602081830303815290604052610292565b600081815260208190526040902080546060919061020d90610484565b80601f016020809104026020016040519081016040528092919081815260200182805461023990610484565b80156102865780601f1061025b57610100808354040283529160200191610286565b820191906000526020600020905b81548152906001019060200180831161026957829003601f168201915b50505050509050919050565b60008281526020818152604090912082516102af928401906102cf565b50506000908152600160208190526040909120805460ff19169091179055565b8280546102db90610484565b90600052602060002090601f0160209004810192826102fd5760008555610343565b82601f1061031657805160ff1916838001178555610343565b82800160010185558215610343579182015b82811115610343578251825591602001919060010190610328565b5061034f929150610353565b5090565b5b8082111561034f5760008155600101610354565b6000806040838503121561037b57600080fd5b50508035926020909101359150565b60008060006040848603121561039f57600080fd5b83359250602084013567ffffffffffffffff808211156103be57600080fd5b818601915086601f8301126103d257600080fd5b8135818111156103e157600080fd5b8760208285010111156103f357600080fd5b6020830194508093505050509250925092565b60006020828403121561041857600080fd5b5035919050565b600060208083528351808285015260005b8181101561044c57858101830151858201604001528201610430565b8181111561045e576000604083870101525b50601f01601f1916929092016040019392505050565b8183823760009101908152919050565b600181811c9082168061049857607f821691505b6020821081036104b857634e487b7160e01b600052602260045260246000fd5b50919050565b828482376000838201601760f91b81526001600085548181841c9050838216806104e957607f821691505b6020808310820361050857634e487b7160e01b85526022600452602485fd5b81801561051c576001811461053157610562565b60ff1985168888015283880187019550610562565b60008b81526020902060005b858110156105585781548a82018a015290880190830161053d565b5050868489010195505b50939b9a505050505050505050505056fea2646970667358221220356d7d199e1e5527c4c33a979c7bbba8a2d745a0f9308c5e29a97f548a7c139f64736f6c634300080d0033608060405234801561001057600080fd5b50604051610c70380380610c7083398101604081905261002f916100d8565b61003833610070565b600180546001600160a01b039485166001600160a01b031991821617909155600280549390941692169190911790915560035561011b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100d557600080fd5b50565b6000806000606084860312156100ed57600080fd5b83516100f8816100c0565b6020850151909350610109816100c0565b80925050604084015190509250925092565b610b468061012a6000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806390ddd11b1161008c578063da8c229e11610066578063da8c229e146101bf578063f2fde38b146101e2578063f6a74ed7146101f5578063faff50a81461020857600080fd5b806390ddd11b14610176578063a7fc7a0714610189578063aeb8ce9b1461019c57600080fd5b8063715018a6116100bd578063715018a61461014a5780637b103999146101525780638da5cb5b1461016557600080fd5b80631e59c529146100e45780632eb8221a1461010a5780634e543b2614610135575b600080fd5b6100f76100f23660046109b5565b610211565b6040519081526020015b60405180910390f35b60025461011d906001600160a01b031681565b6040516001600160a01b039091168152602001610101565b610148610143366004610a0c565b610455565b005b610148610521565b60015461011d906001600160a01b031681565b6000546001600160a01b031661011d565b610148610184366004610a0c565b610587565b610148610197366004610a0c565b610610565b6101af6101aa366004610a30565b6106b6565b6040519015158152602001610101565b6101af6101cd366004610a0c565b60046020526000908152604090205460ff1681565b6101486101f0366004610a0c565b61078c565b610148610203366004610a0c565b610857565b6100f760035481565b6001546003546040516302571be360e01b8152600481019190915260009130916001600160a01b03909116906302571be390602401602060405180830381865afa158015610263573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102879190610a72565b6001600160a01b0316146102ae5760405163185923dd60e31b815260040160405180910390fd5b3360009081526004602052604090205460ff166102dd576040516282b42960e81b815260040160405180910390fd5b6102e784846106b6565b61030457604051630c01d0b160e21b815260040160405180910390fd5b60008484604051602001610319929190610a8f565b60408051808303601f190181529082905280516020909101206001546003546306ab592360e01b84526004840152602483018290526001600160a01b03868116604485015291935016906306ab5923906064016020604051808303816000875af115801561038b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103af9190610a9f565b50600254600354604051639d105a2560e01b81526001600160a01b0390921691639d105a25916103e59189908990600401610ab8565b600060405180830381600087803b1580156103ff57600080fd5b505af1158015610413573d6000803e3d6000fd5b50506040516001600160a01b03861692508391507f25631d78c8c9e9757c5c8419905e25845aa864284d1df44be777e5fafd2e09f790600090a3949350505050565b6000546001600160a01b031633146104b45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600154600354604051630c4b7b8560e11b815260048101919091526001600160a01b03838116602483015290911690631896f70a90604401600060405180830381600087803b15801561050657600080fd5b505af115801561051a573d6000803e3d6000fd5b5050505050565b6000546001600160a01b0316331461057b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b61058560006108fa565b565b6000546001600160a01b031633146105e15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461066a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b6001600160a01b038116600081815260046020526040808220805460ff19166001179055517f0a8bb31534c0ed46f380cb867bd5c803a189ced9a764e30b3a4991a9901d74749190a250565b60008060035484846040516020016106cf929190610a8f565b604051602081830303815290604052805190602001206040516020016106ff929190918252602082015260400190565b60408051808303601f19018152908290528051602090910120600154631ef3fca760e31b8352600483018290529092506001600160a01b03169063f79fe53890602401602060405180830381865afa15801561075f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107839190610aee565b15949350505050565b6000546001600160a01b031633146107e65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b6001600160a01b03811661084b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104ab565b610854816108fa565b50565b6000546001600160a01b031633146108b15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ab565b6001600160a01b038116600081815260046020526040808220805460ff19169055517f33d83959be2573f5453b12eb9d43b3499bc57d96bd2f067ba44803c859e811139190a250565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008083601f84011261096957600080fd5b50813567ffffffffffffffff81111561098157600080fd5b60208301915083602082850101111561099957600080fd5b9250929050565b6001600160a01b038116811461085457600080fd5b6000806000604084860312156109ca57600080fd5b833567ffffffffffffffff8111156109e157600080fd5b6109ed86828701610957565b9094509250506020840135610a01816109a0565b809150509250925092565b600060208284031215610a1e57600080fd5b8135610a29816109a0565b9392505050565b60008060208385031215610a4357600080fd5b823567ffffffffffffffff811115610a5a57600080fd5b610a6685828601610957565b90969095509350505050565b600060208284031215610a8457600080fd5b8151610a29816109a0565b8183823760009101908152919050565b600060208284031215610ab157600080fd5b5051919050565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b600060208284031215610b0057600080fd5b81518015158114610a2957600080fdfea26469706673582212202800bbbc62c2d31225949b355e1beb1b5a3e2caaeccc55d7133652f7a80bd20264736f6c634300080d003360a06040523480156200001157600080fd5b5060405162000ff638038062000ff68339810160408190526200003491620001de565b6200003f3362000175565b6001600160a01b038281166080819052600280546001600160a01b031916928416929092179091556040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152600091906302571be390602401602060405180830381865afa158015620000c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000eb91906200021d565b90506001600160a01b038116156200016c57604051630f41a04d60e11b81523360048201526001600160a01b03821690631e83409a906024016020604051808303816000875af115801562000144573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016a919062000244565b505b5050506200025e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620001db57600080fd5b50565b60008060408385031215620001f257600080fd5b8251620001ff81620001c5565b60208401519092506200021281620001c5565b809150509250929050565b6000602082840312156200023057600080fd5b81516200023d81620001c5565b9392505050565b6000602082840312156200025757600080fd5b5051919050565b608051610d6e620002886000396000818161015d015281816102d701526104d50152610d6e6000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063c66485b211610066578063c66485b2146101e1578063da8c229e146101f4578063e0dba60f14610227578063f2fde38b1461023a57600080fd5b80638da5cb5b146101aa578063bffbe61c146101bb578063c47f0027146101ce57600080fd5b8063715018a6116100c8578063715018a61461013b5780637a806d6b146101455780637b10399914610158578063828eab0e1461019757600080fd5b80630f5a5466146100ef5780631e83409a146101155780636566963114610128575b600080fd5b6101026100fd366004610a6f565b61024d565b6040519081526020015b60405180910390f35b610102610123366004610aa8565b610261565b610102610136366004610ac5565b610283565b61014361053c565b005b610102610153366004610bb3565b6105a2565b61017f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161010c565b60025461017f906001600160a01b031681565b6000546001600160a01b031661017f565b6101026101c9366004610aa8565b61061d565b6101026101dc366004610c28565b610678565b6101436101ef366004610aa8565b610695565b610217610202366004610aa8565b60016020526000908152604090205460ff1681565b604051901515815260200161010c565b610143610235366004610c73565b61079a565b610143610248366004610aa8565b610853565b600061025a338484610283565b9392505050565b60025460009061027d90339084906001600160a01b0316610283565b92915050565b6000836001600160a01b0381163314806102ac57503360009081526001602052604090205460ff165b80610342575060405163e985e9c560e01b81526001600160a01b0382811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa15801561031e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103429190610ca1565b8061035157506103518161091e565b6103ee5760405162461bcd60e51b815260206004820152605b60248201527f526576657273655265676973747261723a2043616c6c6572206973206e6f742060448201527f6120636f6e74726f6c6c6572206f7220617574686f726973656420627920616460648201527f6472657373206f7220746865206164647265737320697473656c660000000000608482015260a4015b60405180910390fd5b60006103f986610997565b604080517f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2602080830191909152818301849052825180830384018152606090920192839052815191012091925081906001600160a01b038916907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a36040516305ef2c7f60e41b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152602481018390526001600160a01b0387811660448301528681166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b15801561051957600080fd5b505af115801561052d573d6000803e3d6000fd5b50929998505050505050505050565b6000546001600160a01b031633146105965760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e5565b6105a060006109fd565b565b6000806105b0868686610283565b604051637737221360e01b81529091506001600160a01b038516906377372213906105e19084908790600401610cbe565b600060405180830381600087803b1580156105fb57600080fd5b505af115801561060f573d6000803e3d6000fd5b509298975050505050505050565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e261064983610997565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b60025460009061027d90339081906001600160a01b0316856105a2565b6000546001600160a01b031633146106ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e5565b6001600160a01b03811661076b5760405162461bcd60e51b815260206004820152603060248201527f526576657273655265676973747261723a205265736f6c76657220616464726560448201527f7373206d757374206e6f7420626520300000000000000000000000000000000060648201526084016103e5565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146107f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e5565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf87910160405180910390a25050565b6000546001600160a01b031633146108ad5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103e5565b6001600160a01b0381166109125760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103e5565b61091b816109fd565b50565b6000816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561097a575060408051601f3d908101601f1916820190925261097791810190610d1b565b60015b61098657506000919050565b6001600160a01b0316331492915050565b600060285b80156109f157600019016f181899199a1a9b1b9c1cb0b131b232b360811b600f84161a8153601090920491600019016f181899199a1a9b1b9c1cb0b131b232b360811b600f84161a815360108304925061099c565b50506028600020919050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038116811461091b57600080fd5b60008060408385031215610a8257600080fd5b8235610a8d81610a5a565b91506020830135610a9d81610a5a565b809150509250929050565b600060208284031215610aba57600080fd5b813561025a81610a5a565b600080600060608486031215610ada57600080fd5b8335610ae581610a5a565b92506020840135610af581610a5a565b91506040840135610b0581610a5a565b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610b3757600080fd5b813567ffffffffffffffff80821115610b5257610b52610b10565b604051601f8301601f19908116603f01168101908282118183101715610b7a57610b7a610b10565b81604052838152866020858801011115610b9357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610bc957600080fd5b8435610bd481610a5a565b93506020850135610be481610a5a565b92506040850135610bf481610a5a565b9150606085013567ffffffffffffffff811115610c1057600080fd5b610c1c87828801610b26565b91505092959194509250565b600060208284031215610c3a57600080fd5b813567ffffffffffffffff811115610c5157600080fd5b610c5d84828501610b26565b949350505050565b801515811461091b57600080fd5b60008060408385031215610c8657600080fd5b8235610c9181610a5a565b91506020830135610a9d81610c65565b600060208284031215610cb357600080fd5b815161025a81610c65565b82815260006020604081840152835180604085015260005b81811015610cf257858101830151858201606001528201610cd6565b81811115610d04576000606083870101525b50601f01601f191692909201606001949350505050565b600060208284031215610d2d57600080fd5b815161025a81610a5a56fea26469706673582212200b3400d18ca697209c80791ea5ecc1d9fdd20a1b804e2393123341605dadf1c064736f6c634300080d003360a060405234801561001057600080fd5b5060405161072538038061072583398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161068d61009860003960008181606b015281816101530152610212015261068d6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631e59c529146100515780632b20e397146100665780639791c097146100aa578063aeb8ce9b146100cd575b600080fd5b61006461005f3660046103cb565b6100e0565b005b61008d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100bd6100b8366004610470565b6101d5565b60405190151581526020016100a1565b6100bd6100db366004610470565b6101e9565b61011f83838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101e992505050565b61013c57604051630c01d0b160e21b815260040160405180910390fd5b604051631e59c52960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e59c5299061018c90869086908690600401610521565b6020604051808303816000875af11580156101ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cf9190610563565b50505050565b6000806101e18361028e565b101592915050565b60006101f4826101d5565b8015610288575060405163aeb8ce9b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063aeb8ce9b9061024790859060040161057c565b602060405180830381865afa158015610264573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028891906105d1565b92915050565b600080825b80518210156103c45760078183815181106102b0576102b06105fa565b01602001516001600160f81b031990811690911c166000036102de576102d7600183610626565b91506103b2565b8051600360f91b906005908390859081106102fb576102fb6105fa565b01602001516001600160f81b031990811690911c1603610320576102d7600283610626565b8051600760f91b9060049083908590811061033d5761033d6105fa565b01602001516001600160f81b031990811690911c1603610362576102d7600383610626565b8051600f60f91b9060039083908590811061037f5761037f6105fa565b01602001516001600160f81b031990811690911c16036103a4576102d7600483610626565b6103af600183610626565b91505b826103bc8161063e565b935050610293565b5050919050565b6000806000604084860312156103e057600080fd5b833567ffffffffffffffff808211156103f857600080fd5b818601915086601f83011261040c57600080fd5b81358181111561041b57600080fd5b87602082850101111561042d57600080fd5b602092830195509350508401356001600160a01b038116811461044f57600080fd5b809150509250925092565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561048257600080fd5b813567ffffffffffffffff8082111561049a57600080fd5b818401915084601f8301126104ae57600080fd5b8135818111156104c0576104c061045a565b604051601f8201601f19908116603f011681019083821181831017156104e8576104e861045a565b8160405282815287602084870101111561050157600080fd5b826020860160208301376000928101602001929092525095945050505050565b604081528260408201528284606083013760006060848301015260006060601f19601f86011683010190506001600160a01b0383166020830152949350505050565b60006020828403121561057557600080fd5b5051919050565b600060208083528351808285015260005b818110156105a95785810183015185820160400152820161058d565b818111156105bb576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156105e357600080fd5b815180151581146105f357600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561063957610639610610565b500190565b60006001820161065057610650610610565b506001019056fea26469706673582212206a5eeafc12c87c8f824e5abe38df15efe196ef2283b200b7beae757eb117b45464736f6c634300080d00331ffa5ff8aa60d5982bd5d42ffd70a799ffb1ea4f2e7bb8c4ed2a7983902ac35d329539a1d23af1810c48a07fe7fc66a3b34fbc8b37e9b3cdb97bb88ceab7e4bfdec08c9dbbdd0890e300eb5062089b2d4b1c40e3673bbccb5423f7b37dcf9a9c",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c95760003560e01c80637b103999116100815780639368678f1161005b5780639368678f146101e0578063d1131c7214610207578063f82561211461022e57600080fd5b80637b103999146101935780637d70c659146101a657806380869853146101cd57600080fd5b80632b20e397116100b25780632b20e397146101465780632eb8221a146101595780635ecb25021461016c57600080fd5b80631d9273c7146100ce5780631f0fca471461011b575b600080fd5b6101086100dc366004610241565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6040519081526020015b60405180910390f35b60055461012e906001600160a01b031681565b6040516001600160a01b039091168152602001610112565b60015461012e906001600160a01b031681565b60045461012e906001600160a01b031681565b6101087f329539a1d23af1810c48a07fe7fc66a3b34fbc8b37e9b3cdb97bb88ceab7e4bf81565b60005461012e906001600160a01b031681565b6101087fdec08c9dbbdd0890e300eb5062089b2d4b1c40e3673bbccb5423f7b37dcf9a9c81565b60025461012e906001600160a01b031681565b6101087fe5e14487b78f85faa6e1808e89246cf57dd34831548ff2e6097380d98db2504a81565b6101087f1ffa5ff8aa60d5982bd5d42ffd70a799ffb1ea4f2e7bb8c4ed2a7983902ac35d81565b60035461012e906001600160a01b031681565b6000806040838503121561025457600080fd5b5050803592602090910135915056fea2646970667358221220731e485ad287133b26b5debc2a9902d99cc5a796fbe97cea8f0f3c9539a4d4fe64736f6c634300080d0033",
  "devdoc": {
    "author": "Gilgames <gilgames@kuname.domains>",
    "kind": "dev",
    "methods": {},
    "title": "KNS Deployer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6465,
        "contract": "src/KNSDeployer.sol:KNSDeployer",
        "label": "registry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(KNSRegistry)7612"
      },
      {
        "astId": 6468,
        "contract": "src/KNSDeployer.sol:KNSDeployer",
        "label": "registrar",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(KNSRegistrar)7154"
      },
      {
        "astId": 6471,
        "contract": "src/KNSDeployer.sol:KNSDeployer",
        "label": "reverseRegistrar",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(KNSReverseRegistrar)7954"
      },
      {
        "astId": 6474,
        "contract": "src/KNSDeployer.sol:KNSDeployer",
        "label": "publicResolver",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(KNSPublicResolver)6913"
      },
      {
        "astId": 6477,
        "contract": "src/KNSDeployer.sol:KNSDeployer",
        "label": "namehashDB",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(NamehashDB)8281"
      },
      {
        "astId": 6480,
        "contract": "src/KNSDeployer.sol:KNSDeployer",
        "label": "fifoRegistrarController",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(FIFORegistrarController)6425"
      }
    ],
    "types": {
      "t_contract(FIFORegistrarController)6425": {
        "encoding": "inplace",
        "label": "contract FIFORegistrarController",
        "numberOfBytes": "20"
      },
      "t_contract(KNSPublicResolver)6913": {
        "encoding": "inplace",
        "label": "contract KNSPublicResolver",
        "numberOfBytes": "20"
      },
      "t_contract(KNSRegistrar)7154": {
        "encoding": "inplace",
        "label": "contract KNSRegistrar",
        "numberOfBytes": "20"
      },
      "t_contract(KNSRegistry)7612": {
        "encoding": "inplace",
        "label": "contract KNSRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(KNSReverseRegistrar)7954": {
        "encoding": "inplace",
        "label": "contract KNSReverseRegistrar",
        "numberOfBytes": "20"
      },
      "t_contract(NamehashDB)8281": {
        "encoding": "inplace",
        "label": "contract NamehashDB",
        "numberOfBytes": "20"
      }
    }
  }
}