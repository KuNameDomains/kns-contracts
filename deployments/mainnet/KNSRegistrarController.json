{
  "address": "0x5a881D80091E8815F9a0884E5587CAAE4928D00b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract NameRegistrar",
          "name": "_registrar",
          "type": "address"
        },
        {
          "internalType": "contract IReverseRegistrar",
          "name": "_reverseRegistrar",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ControllerNotLive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughKCSProvided",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UnavailableName",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "label",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NameRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract KNSPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "reverseRecord",
          "type": "bool"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registrar",
      "outputs": [
        {
          "internalType": "contract NameRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reverseRegistrar",
      "outputs": [
        {
          "internalType": "contract IReverseRegistrar",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "valid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x01f62014ecbffc299a5434d74422be38c35acb1e305bd1f3fe62cc5e921638cb",
  "receipt": {
    "to": null,
    "from": "0xA2a8707AAACf1c5651A5FCD547B1F454AF2fb63D",
    "contractAddress": "0x5a881D80091E8815F9a0884E5587CAAE4928D00b",
    "transactionIndex": 1,
    "gasUsed": "1062897",
    "logsBloom": "0x
    "blockHash": "0x2851bf1fa6b36382b106714744be3fd2c224a54a733d6e238bee43b22a04fe0c",
    "transactionHash": "0x01f62014ecbffc299a5434d74422be38c35acb1e305bd1f3fe62cc5e921638cb",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 9918731,
        "transactionHash": "0x01f62014ecbffc299a5434d74422be38c35acb1e305bd1f3fe62cc5e921638cb",
        "address": "0x5a881D80091E8815F9a0884E5587CAAE4928D00b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a2a8707aaacf1c5651a5fcd547b1f454af2fb63d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2851bf1fa6b36382b106714744be3fd2c224a54a733d6e238bee43b22a04fe0c"
      }
    ],
    "blockNumber": 9918731,
    "cumulativeGasUsed": "1083897",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBBc256D5672131B2Ad2A5c14664e492bf94d1D7b",
    "0xBd6F7d32a6CD0764D546e6A28D3Ba38645284F5F"
  ],
  "numDeployments": 1,
  "solcInputHash": "391127a9a4317d748188e24c74830938",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract NameRegistrar\",\"name\":\"_registrar\",\"type\":\"address\"},{\"internalType\":\"contract IReverseRegistrar\",\"name\":\"_reverseRegistrar\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ControllerNotLive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughKCSProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnavailableName\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"label\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NameRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract KNSPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"reverseRecord\",\"type\":\"bool\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrar\",\"outputs\":[{\"internalType\":\"contract NameRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reverseRegistrar\",\"outputs\":[{\"internalType\":\"contract IReverseRegistrar\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"valid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/KNSRegistrarController.sol\":\"KNSRegistrarController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":666},\"remappings\":[]},\"sources\":{\"@ensdomains/ens-contracts/contracts/registry/IReverseRegistrar.sol\":{\"content\":\"pragma solidity >=0.8.4;\\n\\ninterface IReverseRegistrar {\\n    function setDefaultResolver(address resolver) external;\\n\\n    function claim(address owner) external returns (bytes32);\\n\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    function claimWithResolver(address owner, address resolver)\\n        external\\n        returns (bytes32);\\n\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd6ba83973ffbab31dec17a716af3bb5703844d16dceb5078583fb2c509f8bcc2\"},\"@ensdomains/ens-contracts/contracts/resolvers/ISupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) external pure returns(bool);\\n}\",\"keccak256\":\"0x4960422af4a3d38a2c440c656104465cba7dea0231cb7ae4a489a85dd65f645f\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/ResolverBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"./SupportsInterface.sol\\\";\\n\\nabstract contract ResolverBase is SupportsInterface {\\n    function isAuthorised(bytes32 node) internal virtual view returns(bool);\\n\\n    modifier authorised(bytes32 node) {\\n        require(isAuthorised(node));\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xee4e3e99b515bdb2fc231c81fc6ff35cf09c3b57e9aaef538bfbb32f7c59248c\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/SupportsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ISupportsInterface.sol\\\";\\n\\nabstract contract SupportsInterface is ISupportsInterface {\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(ISupportsInterface).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xcd27206ee8f8bd520d5441294f6438dde98f6933eb8801ee59a0155b8a8cde1b\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/AddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\nimport \\\"../ResolverBase.sol\\\";\\nimport \\\"./IAddrResolver.sol\\\";\\nimport \\\"./IAddressResolver.sol\\\";\\n\\nabstract contract AddrResolver is IAddrResolver, IAddressResolver, ResolverBase {\\n    uint constant private COIN_TYPE_ETH = 60;\\n\\n    mapping(bytes32=>mapping(uint=>bytes)) _addresses;\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param a The address to set.\\n     */\\n    function setAddr(bytes32 node, address a) virtual external authorised(node) {\\n        setAddr(node, COIN_TYPE_ETH, addressToBytes(a));\\n    }\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) virtual override public view returns (address payable) {\\n        bytes memory a = addr(node, COIN_TYPE_ETH);\\n        if(a.length == 0) {\\n            return payable(0);\\n        }\\n        return bytesToAddress(a);\\n    }\\n\\n    function setAddr(bytes32 node, uint coinType, bytes memory a) virtual public authorised(node) {\\n        emit AddressChanged(node, coinType, a);\\n        if(coinType == COIN_TYPE_ETH) {\\n            emit AddrChanged(node, bytesToAddress(a));\\n        }\\n        _addresses[node][coinType] = a;\\n    }\\n\\n    function addr(bytes32 node, uint coinType) virtual override public view returns(bytes memory) {\\n        return _addresses[node][coinType];\\n    }\\n\\n    function supportsInterface(bytes4 interfaceID) virtual override public pure returns(bool) {\\n        return interfaceID == type(IAddrResolver).interfaceId || interfaceID == type(IAddressResolver).interfaceId || super.supportsInterface(interfaceID);\\n    }\\n\\n    function bytesToAddress(bytes memory b) internal pure returns(address payable a) {\\n        require(b.length == 20);\\n        assembly {\\n            a := div(mload(add(b, 32)), exp(256, 12))\\n        }\\n    }\\n\\n    function addressToBytes(address a) internal pure returns(bytes memory b) {\\n        b = new bytes(20);\\n        assembly {\\n            mstore(add(b, 32), mul(a, exp(256, 12)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x356ed43442c7598b7489e1d1fef89f7b226e53c55e5cd319274b1fb7b7a81355\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddrResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the legacy (ETH-only) addr function.\\n */\\ninterface IAddrResolver {\\n    event AddrChanged(bytes32 indexed node, address a);\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) external view returns (address payable);\\n}\\n\",\"keccak256\":\"0x2ad7f2fc60ebe0f93745fe70247f6a854f66af732483fda2a3c5e055614445e8\",\"license\":\"MIT\"},\"@ensdomains/ens-contracts/contracts/resolvers/profiles/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\n/**\\n * Interface for the new (multicoin) addr function.\\n */\\ninterface IAddressResolver {\\n    event AddressChanged(bytes32 indexed node, uint coinType, bytes newAddress);\\n\\n    function addr(bytes32 node, uint coinType) external view returns(bytes memory);\\n}\\n\",\"keccak256\":\"0x20717682fa28eb1755a3b6ade738c8e0239c1cc393579058d4c3ffaca238c04b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"ado-contracts/contracts/interfaces/IERC2362.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0 <0.9.0;\\n\\n/**\\n* @dev EIP2362 Interface for pull oracles\\n* https://github.com/adoracles/EIPs/blob/erc-2362/EIPS/eip-2362.md\\n*/\\ninterface IERC2362\\n{\\n\\t/**\\n\\t * @dev Exposed function pertaining to EIP standards\\n\\t * @param _id bytes32 ID of the query\\n\\t * @return int,uint,uint returns the value, timestamp, and status code of query\\n\\t */\\n\\tfunction valueFor(bytes32 _id) external view returns(int256,uint256,uint256);\\n}\",\"keccak256\":\"0x4df66aa83b94d7c3d52aba3522b6eeafc19f2c45299b7c871ef46eb199ee4f6b\",\"license\":\"MIT\"},\"src/KNSPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport { Strings } from \\\"./libraries/Strings.sol\\\";\\nimport { IWitnetPriceRouter, IERC165 } from \\\"witnet-solidity-bridge/contracts/interfaces/IWitnetPriceRouter.sol\\\";\\nimport { IWitnetPriceFeed } from \\\"witnet-solidity-bridge/contracts/interfaces/IWitnetPriceFeed.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror NameTooShort();\\nerror CollectionAlreadyEligible();\\nerror CollectionNotEligible();\\n\\nstruct PriceBreakdown {\\n    bool isEligibleForDiscount;\\n    uint256 basePrice;\\n    uint256 discountedPrice;\\n    uint256 finalPrice;\\n}\\n\\ncontract KNSPriceOracle is Ownable {\\n    using Strings for string;\\n\\n    IWitnetPriceRouter public immutable witnetPriceRouter;\\n    bytes32 public immutable kcsUSDTFeedID;\\n    IWitnetPriceFeed public kcsUSDTPriceFeed;\\n    address[] public nftCollectionsEligibleForDiscount;\\n\\n    constructor(IWitnetPriceRouter _witnetPriceRouter) {\\n        witnetPriceRouter = _witnetPriceRouter;\\n        kcsUSDTFeedID = bytes32(0x31debffc453c5d04a78431e7bc28098c606d2bbeea22f10a35809924a201a977);\\n        updateKCSUSDTPriceFeed();\\n    }\\n\\n    /// Detects if the WitnetPriceRouter is now pointing to a different IWitnetPriceFeed implementation:\\n    function updateKCSUSDTPriceFeed() public {\\n        IERC165 _newPriceFeed = witnetPriceRouter.getPriceFeed(kcsUSDTFeedID);\\n        if (address(_newPriceFeed) != address(0)) {\\n            kcsUSDTPriceFeed = IWitnetPriceFeed(address(_newPriceFeed));\\n        }\\n    }\\n\\n    function getNameBasePriceInUSD(string calldata name) public pure returns (uint256 price) {\\n        uint256 length = name.strlen();\\n\\n        if (length < 3) {\\n            revert NameTooShort();\\n        } else if (length == 3) {\\n            price = 700;\\n        } else if (length == 4) {\\n            price = 200;\\n        } else if (length == 5) {\\n            price = 70;\\n        } else if (length >= 6) {\\n            price = 20;\\n        }\\n\\n        price = price * 10**6;\\n    }\\n\\n    function getNameDiscountedPriceInUSD(string calldata name) public pure returns (uint256 price) {\\n        uint256 length = name.strlen();\\n\\n        if (length < 3) {\\n            revert NameTooShort();\\n        } else if (length == 3) {\\n            price = 630;\\n        } else if (length == 4) {\\n            price = 160;\\n        } else if (length == 5) {\\n            price = 49;\\n        } else if (length >= 6) {\\n            price = 10;\\n        }\\n\\n        price = price * 10**6;\\n    }\\n\\n    function isEligibleForDiscount(address buyer) public view returns (bool) {\\n        for (uint256 i = 0; i < nftCollectionsEligibleForDiscount.length; i++) {\\n            if (IERC721(nftCollectionsEligibleForDiscount[i]).balanceOf(buyer) > 0) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function getNameBasePriceInKCS(string calldata name) public view returns (uint256 price) {\\n        uint256 nameUSDPrice = getNameBasePriceInUSD(name);\\n        int256 kcsUSDTPrice = kcsUSDTPriceFeed.lastPrice();\\n\\n        return (nameUSDPrice * 10**18) / uint256(kcsUSDTPrice);\\n    }\\n\\n    function getNameDiscountedPriceInKCS(string calldata name) public view returns (uint256 price) {\\n        uint256 nameUSDPrice = getNameDiscountedPriceInUSD(name);\\n        int256 kcsUSDTPrice = kcsUSDTPriceFeed.lastPrice();\\n\\n        return (nameUSDPrice * 10**18) / uint256(kcsUSDTPrice);\\n    }\\n\\n    function getNamePriceInKCSForBuyer(string calldata name, address buyer) public view returns (uint256 price) {\\n        uint256 nameUSDPrice;\\n        int256 kcsUSDTPrice = kcsUSDTPriceFeed.lastPrice();\\n\\n        if (isEligibleForDiscount(buyer)) {\\n            nameUSDPrice = getNameDiscountedPriceInUSD(name);\\n        } else {\\n            nameUSDPrice = getNameBasePriceInUSD(name);\\n        }\\n\\n        return (nameUSDPrice * 10**18) / uint256(kcsUSDTPrice);\\n    }\\n\\n    function getNamePriceBreakdownForBuyer(string calldata name, address _buyer)\\n        public\\n        view\\n        returns (PriceBreakdown memory priceBreakdown)\\n    {\\n        priceBreakdown.isEligibleForDiscount = isEligibleForDiscount(_buyer);\\n        priceBreakdown.basePrice = getNameBasePriceInKCS(name);\\n        priceBreakdown.discountedPrice = getNameDiscountedPriceInKCS(name);\\n        priceBreakdown.finalPrice = getNamePriceInKCSForBuyer(name, _buyer);\\n    }\\n\\n    function addEligibleCollection(address collection) public onlyOwner {\\n        for (uint256 i = 0; i < nftCollectionsEligibleForDiscount.length; i++) {\\n            if (nftCollectionsEligibleForDiscount[i] == collection) {\\n                revert CollectionAlreadyEligible();\\n            }\\n        }\\n\\n        nftCollectionsEligibleForDiscount.push(collection);\\n    }\\n\\n    function removeEligibleCollection(address collection) public onlyOwner {\\n        for (uint256 i = 0; i < nftCollectionsEligibleForDiscount.length; i++) {\\n            if (nftCollectionsEligibleForDiscount[i] == collection) {\\n                nftCollectionsEligibleForDiscount[i] = nftCollectionsEligibleForDiscount[\\n                    nftCollectionsEligibleForDiscount.length - 1\\n                ];\\n                nftCollectionsEligibleForDiscount.pop();\\n                return;\\n            }\\n        }\\n\\n        revert CollectionNotEligible();\\n    }\\n}\\n\",\"keccak256\":\"0x16094ee4d81df8e61522c69385632b8acad9de33ca8c870459584279aab3e3c4\",\"license\":\"MIT\"},\"src/KNSRegistrarController.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\nimport { NameRegistrar } from \\\"./interfaces/NameRegistrar.sol\\\";\\nimport { Strings } from \\\"./libraries/Strings.sol\\\";\\nimport \\\"../src/KNSPriceOracle.sol\\\";\\nimport { AddrResolver } from \\\"@ensdomains/ens-contracts/contracts/resolvers/profiles/AddrResolver.sol\\\";\\nimport { IReverseRegistrar } from \\\"@ensdomains/ens-contracts/contracts/registry/IReverseRegistrar.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nerror UnavailableName();\\nerror NotEnoughKCSProvided();\\nerror ControllerNotLive();\\n\\ncontract KNSRegistrarController is Ownable {\\n    using Strings for string;\\n\\n    NameRegistrar public immutable registrar;\\n    IReverseRegistrar public immutable reverseRegistrar;\\n    KNSPriceOracle public priceOracle;\\n\\n    event NameRegistered(string name, bytes32 indexed label, address indexed owner);\\n\\n    constructor(NameRegistrar _registrar, IReverseRegistrar _reverseRegistrar) {\\n        registrar = _registrar;\\n        reverseRegistrar = _reverseRegistrar;\\n    }\\n\\n    function setPriceOracle(address _priceOracle) public onlyOwner {\\n        priceOracle = KNSPriceOracle(_priceOracle);\\n    }\\n\\n    function valid(string memory name) public pure returns (bool) {\\n        return name.strlen() >= 0;\\n    }\\n\\n    function available(string memory name) public view returns (bool) {\\n        return valid(name) && registrar.available(name);\\n    }\\n\\n    function register(\\n        string calldata name,\\n        address _owner,\\n        address resolver,\\n        address addr,\\n        bool reverseRecord\\n    ) public payable {\\n        if (address(priceOracle) == address(0)) {\\n            revert ControllerNotLive();\\n        }\\n\\n        if (!available(name)) {\\n            revert UnavailableName();\\n        }\\n\\n        uint256 price = priceOracle.getNamePriceInKCSForBuyer(name, msg.sender);\\n        if (owner() == msg.sender) {\\n            price = 0;\\n        }\\n\\n        if (msg.value < price) {\\n            revert NotEnoughKCSProvided();\\n        }\\n\\n        bytes32 hashedName;\\n        if (resolver != address(0)) {\\n            // We temporarily set this contract as the owner to give it\\n            // permission to set up the resolver.\\n            hashedName = registrar.register(name, address(this));\\n\\n            bytes32 node = keccak256(abi.encodePacked(registrar.tldNode(), hashedName));\\n            registrar.registry().setResolver(node, resolver);\\n\\n            if (addr != address(0)) {\\n                AddrResolver(resolver).setAddr(node, addr);\\n            }\\n\\n            if (reverseRecord) {\\n                _setReverseRecord(name, resolver, msg.sender);\\n            }\\n\\n            registrar.registry().transferFrom(address(this), _owner, uint256(node));\\n        } else {\\n            require(addr == address(0));\\n            require(reverseRecord == false);\\n            hashedName = registrar.register(name, _owner);\\n        }\\n\\n        emit NameRegistered(name, hashedName, _owner);\\n\\n        payable(owner()).transfer(price);\\n        if (msg.value > price) {\\n            payable(msg.sender).transfer(msg.value - price);\\n        }\\n    }\\n\\n    function withdraw() public {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n\\n    function _setReverseRecord(\\n        string calldata name,\\n        address resolver,\\n        address owner\\n    ) internal {\\n        reverseRegistrar.setNameForAddr(msg.sender, owner, resolver, string(abi.encodePacked(name, \\\".kcc\\\")));\\n    }\\n}\\n\",\"keccak256\":\"0xf2ee5f8bb23156aa008f307d44aaf2d92eb7460c8e5f25221de2b5ea116b4608\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/NameRegistrar.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\nimport { NameRegistry } from \\\"./NameRegistry.sol\\\";\\n\\ninterface NameRegistrar {\\n    /**\\n     * @dev Emitted when a new controller is added.\\n     */\\n    event ControllerAdded(address indexed controller);\\n\\n    /**\\n     * @dev Emitted when a controller is removed.\\n     */\\n    event ControllerRemoved(address indexed controller);\\n\\n    /**\\n     * @dev Emitted upon name registration.\\n     */\\n    event NameRegistered(bytes32 indexed hashedName, address indexed owner);\\n\\n    /**\\n     * @dev Adds a controller that can register names.\\n     */\\n    function registry() external view returns (NameRegistry);\\n\\n    /**\\n     * @dev Adds a controller that can register names.\\n     */\\n    function tldNode() external view returns (bytes32);\\n\\n    /**\\n     * @dev Adds a controller that can register names.\\n     */\\n    function addController(address controller) external;\\n\\n    /**\\n     * @dev Removes a previously added controller.\\n     */\\n    function removeController(address controller) external;\\n\\n    /**\\n     * @dev Sets the resolver for the domain that this registrar manages.\\n     */\\n    function setResolver(address resolver) external;\\n\\n    /**\\n     * @dev Returns true iff the specified name is available for registration.\\n     */\\n    function available(string calldata name) external view returns (bool);\\n\\n    /**\\n     * @dev Registers a name.\\n     */\\n    function register(string calldata name, address owner) external returns (bytes32 hashedName);\\n}\\n\",\"keccak256\":\"0x546e1145822e222458926432676a547fc82ba6688bbdbdd6a324754b16114ff2\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/NameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.13;\\n\\nimport { IERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface NameRegistry is IERC721Enumerable {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd9963577d1768ad72e0cc224e9050484667dfc68641fd4a29e5962bf4de3a2bf\",\"license\":\"AGPL-3.0-only\"},\"src/libraries/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nlibrary Strings {\\n    // Reference: https://ethereum.stackexchange.com/questions/13862/is-it-possible-to-check-string-variables-length-inside-the-contract/13886#13886\\n    function strlen(string memory str) internal pure returns (uint256 length) {\\n        uint256 i = 0;\\n        bytes memory string_rep = bytes(str);\\n\\n        while (i < string_rep.length) {\\n            if (string_rep[i] >> 7 == 0) i += 1;\\n            else if (string_rep[i] >> 5 == bytes1(uint8(0x6))) i += 2;\\n            else if (string_rep[i] >> 4 == bytes1(uint8(0xE))) i += 3;\\n            else if (string_rep[i] >> 3 == bytes1(uint8(0x1E)))\\n                i += 4;\\n                //For safety\\n            else i += 1;\\n\\n            length++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe10cbb81eb925cddba31d4b8eaaabe79b0d72801b8e2b2bb8aca0a7ce1bb9886\",\"license\":\"MIT\"},\"witnet-solidity-bridge/contracts/WitnetRequestBoard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./interfaces/IWitnetRequestBoardEvents.sol\\\";\\nimport \\\"./interfaces/IWitnetRequestBoardReporter.sol\\\";\\nimport \\\"./interfaces/IWitnetRequestBoardRequestor.sol\\\";\\nimport \\\"./interfaces/IWitnetRequestBoardView.sol\\\";\\nimport \\\"./interfaces/IWitnetRequestParser.sol\\\";\\n\\n/// @title Witnet Request Board functionality base contract.\\n/// @author The Witnet Foundation.\\nabstract contract WitnetRequestBoard is\\n    IWitnetRequestBoardEvents,\\n    IWitnetRequestBoardReporter,\\n    IWitnetRequestBoardRequestor,\\n    IWitnetRequestBoardView,\\n    IWitnetRequestParser\\n{\\n    receive() external payable {\\n        revert(\\\"WitnetRequestBoard: no transfers accepted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xb04deadd6e24568accfcbb7b76f1c03cb925933aee189115b5b23badc5b6e9ab\",\"license\":\"MIT\"},\"witnet-solidity-bridge/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x14a404607f920aa7ce19e17a0abce07d317c95b427fd8ca7b4aaf0b2999d4847\",\"license\":\"MIT\"},\"witnet-solidity-bridge/contracts/interfaces/IWitnetPriceFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../WitnetRequestBoard.sol\\\";\\n\\n/// @title The Witnet Price Feed basic interface.\\n/// @dev Guides implementation of active price feed polling contracts.\\n/// @author The Witnet Foundation.\\n\\ninterface IWitnetPriceFeed {\\n\\n    /// Signals that a new price update request is being posted to the Witnet Request Board\\n    event PriceFeeding(address indexed from, uint256 queryId, uint256 extraFee);\\n\\n    /// Estimates minimum fee amount in native currency to be paid when \\n    /// requesting a new price update.\\n    /// @dev Actual fee depends on the gas price of the `requestUpdate()` transaction.\\n    /// @param _gasPrice Gas price expected to be paid when calling `requestUpdate()`\\n    function estimateUpdateFee(uint256 _gasPrice) external view returns (uint256);\\n\\n    /// Returns result of the last valid price update request successfully solved by the Witnet oracle.\\n    function lastPrice() external view returns (int256);\\n\\n    /// Returns the EVM-timestamp when last valid price was reported back from the Witnet oracle.\\n    function lastTimestamp() external view returns (uint256);    \\n\\n    /// Returns tuple containing last valid price and timestamp, as well as status code of latest update\\n    /// request that got posted to the Witnet Request Board.\\n    /// @return _lastPrice Last valid price reported back from the Witnet oracle.\\n    /// @return _lastTimestamp EVM-timestamp of the last valid price.\\n    /// @return _lastDrTxHash Hash of the Witnet Data Request that solved the last valid price.\\n    /// @return _latestUpdateStatus Status code of the latest update request.\\n    function lastValue() external view returns (\\n        int _lastPrice,\\n        uint _lastTimestamp,\\n        bytes32 _lastDrTxHash,\\n        uint _latestUpdateStatus\\n    );\\n\\n    /// Returns identifier of the latest update request posted to the Witnet Request Board.\\n    function latestQueryId() external view returns (uint256);\\n\\n    /// Returns hash of the Witnet Data Request that solved the latest update request.\\n    /// @dev Returning 0 while the latest update request remains unsolved.\\n    function latestUpdateDrTxHash() external view returns (bytes32);\\n\\n    /// Returns error message of latest update request posted to the Witnet Request Board.\\n    /// @dev Returning empty string if the latest update request remains unsolved, or\\n    /// @dev if it was succesfully solved with no errors.\\n    function latestUpdateErrorMessage() external view returns (string memory);\\n\\n    /// Returns status code of latest update request posted to the Witnet Request Board:\\n    /// @dev Status codes:\\n    /// @dev   - 200: update request was succesfully solved with no errors\\n    /// @dev   - 400: update request was solved with errors\\n    /// @dev   - 404: update request was not solved yet \\n    function latestUpdateStatus() external view returns (uint256);\\n\\n    /// Returns `true` if latest update request posted to the Witnet Request Board \\n    /// has not been solved yet by the Witnet oracle.\\n    function pendingUpdate() external view returns (bool);\\n\\n    /// Posts a new price update request to the Witnet Request Board. Requires payment of a fee\\n    /// that depends on the value of `tx.gasprice`. See `estimateUpdateFee(uint256)`.\\n    /// @dev If previous update request was not solved yet, calling this method again allows\\n    /// @dev upgrading the update fee if called with a higher `tx.gasprice` value.\\n    function requestUpdate() external payable;\\n\\n    /// Tells whether this contract implements the interface defined by `interfaceId`. \\n    /// @dev See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n    /// @dev to learn more about how these ids are created.\\n    function supportsInterface(bytes4) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xde2af6319e5c6ce8302018b2bc6b41ecdef896a3b218de75e00172a3449c4902\",\"license\":\"MIT\"},\"witnet-solidity-bridge/contracts/interfaces/IWitnetPriceRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"ado-contracts/contracts/interfaces/IERC2362.sol\\\";\\nimport \\\"./IERC165.sol\\\";\\n\\n/// @title The Witnet Price Router basic interface.\\n/// @dev Guides implementation of price feeds aggregation contracts.\\n/// @author The Witnet Foundation.\\nabstract contract IWitnetPriceRouter\\n    is\\n        IERC2362 \\n{\\n    /// Emitted everytime a currency pair is attached to a new price feed contract\\n    /// @dev See https://github.com/adoracles/ADOIPs/blob/main/adoip-0010.md \\n    /// @dev to learn how these ids are created.\\n    event CurrencyPairSet(bytes32 indexed erc2362ID, IERC165 pricefeed);\\n\\n    /// Helper pure function: returns hash of the provided ERC2362-compliant currency pair caption (aka ID).\\n    function currencyPairId(string memory) external pure virtual returns (bytes32);\\n\\n    /// Returns the ERC-165-compliant price feed contract currently serving \\n    /// updates on the given currency pair.\\n    function getPriceFeed(bytes32 _erc2362id) external view virtual returns (IERC165);\\n\\n    /// Returns human-readable ERC2362-based caption of the currency pair being\\n    /// served by the given price feed contract address. \\n    /// @dev Should fail if the given price feed contract address is not currently\\n    /// @dev registered in the router.\\n    function getPriceFeedCaption(IERC165) external view virtual returns (string memory);\\n\\n    /// Returns human-readable caption of the ERC2362-based currency pair identifier, if known.\\n    function lookupERC2362ID(bytes32 _erc2362id) external view virtual returns (string memory);\\n\\n    /// Register a price feed contract that will serve updates for the given currency pair.\\n    /// @dev Setting zero address to a currency pair implies that it will not be served any longer.\\n    /// @dev Otherwise, should fail if the price feed contract does not support the `IWitnetPriceFeed` interface,\\n    /// @dev or if given price feed is already serving another currency pair (within this WitnetPriceRouter instance).\\n    function setPriceFeed(\\n            IERC165 _pricefeed,\\n            uint256 _decimals,\\n            string calldata _base,\\n            string calldata _quote\\n        )\\n        external virtual;\\n\\n    /// Returns list of known currency pairs IDs.\\n    function supportedCurrencyPairs() external view virtual returns (bytes32[] memory);\\n\\n    /// Returns `true` if given pair is currently being served by a compliant price feed contract.\\n    function supportsCurrencyPair(bytes32 _erc2362id) external view virtual returns (bool);\\n\\n    /// Returns `true` if given price feed contract is currently serving updates to any known currency pair. \\n    function supportsPriceFeed(IERC165 _priceFeed) external view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xeabd84fc5a5676dc88de213245b7199e50bc11af174ebb1a5ef460ba262a7276\",\"license\":\"MIT\"},\"witnet-solidity-bridge/contracts/interfaces/IWitnetRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title The Witnet Data Request basic interface.\\n/// @author The Witnet Foundation.\\ninterface IWitnetRequest {\\n    /// A `IWitnetRequest` is constructed around a `bytes` value containing \\n    /// a well-formed Witnet Data Request using Protocol Buffers.\\n    function bytecode() external view returns (bytes memory);\\n\\n    /// Returns SHA256 hash of Witnet Data Request as CBOR-encoded bytes.\\n    function hash() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb455f625c6db8ce0525cb6ba8b2df2d85b37cfac6e2c5b64876b6f0e5bd22269\",\"license\":\"MIT\"},\"witnet-solidity-bridge/contracts/interfaces/IWitnetRequestBoardEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Witnet Request Board emitting events interface.\\n/// @author The Witnet Foundation.\\ninterface IWitnetRequestBoardEvents {\\n    /// Emitted when a Witnet Data Request is posted to the WRB.\\n    event PostedRequest(uint256 queryId, address from);\\n\\n    /// Emitted when a Witnet-solved result is reported to the WRB.\\n    event PostedResult(uint256 queryId, address from);\\n\\n    /// Emitted when all data related to given query is deleted from the WRB.\\n    event DeletedQuery(uint256 queryId, address from);\\n}\\n\",\"keccak256\":\"0xe2cb1369ba158db394c0380231f99174a88d62a66b0e7f8be14179b8c2fbd12f\",\"license\":\"MIT\"},\"witnet-solidity-bridge/contracts/interfaces/IWitnetRequestBoardReporter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title The Witnet Request Board Reporter interface.\\n/// @author The Witnet Foundation.\\ninterface IWitnetRequestBoardReporter {\\n    /// Reports the Witnet-provided result to a previously posted request. \\n    /// @dev Will assume `block.timestamp` as the timestamp at which the request was solved.\\n    /// @dev Fails if:\\n    /// @dev - the `_queryId` is not in 'Posted' status.\\n    /// @dev - provided `_drTxHash` is zero;\\n    /// @dev - length of provided `_result` is zero.\\n    /// @param _queryId The unique identifier of the data request.\\n    /// @param _drTxHash The hash of the solving tally transaction in Witnet.\\n    /// @param _result The result itself as bytes.\\n    function reportResult(uint256 _queryId, bytes32 _drTxHash, bytes calldata _result) external;\\n\\n    /// Reports the Witnet-provided result to a previously posted request.\\n    /// @dev Fails if:\\n    /// @dev - called from unauthorized address;\\n    /// @dev - the `_queryId` is not in 'Posted' status.\\n    /// @dev - provided `_drTxHash` is zero;\\n    /// @dev - length of provided `_result` is zero.\\n    /// @param _queryId The unique query identifier\\n    /// @param _timestamp The timestamp of the solving tally transaction in Witnet.\\n    /// @param _drTxHash The hash of the solving tally transaction in Witnet.\\n    /// @param _result The result itself as bytes.\\n    function reportResult(uint256 _queryId, uint256 _timestamp, bytes32 _drTxHash, bytes calldata _result) external;\\n}\\n\",\"keccak256\":\"0xd00f0923f3b0a40d4c7bed2336293eb4ea261ea546c6d07e37f897bbbf18f513\",\"license\":\"MIT\"},\"witnet-solidity-bridge/contracts/interfaces/IWitnetRequestBoardRequestor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libs/Witnet.sol\\\";\\n\\n/// @title Witnet Requestor Interface\\n/// @notice It defines how to interact with the Witnet Request Board in order to:\\n///   - request the execution of Witnet Radon scripts (data request);\\n///   - upgrade the resolution reward of any previously posted request, in case gas price raises in mainnet;\\n///   - read the result of any previously posted request, eventually reported by the Witnet DON.\\n///   - remove from storage all data related to past and solved data requests, and results.\\n/// @author The Witnet Foundation.\\ninterface IWitnetRequestBoardRequestor {\\n    /// Retrieves a copy of all Witnet-provided data related to a previously posted request, removing the whole query from the WRB storage.\\n    /// @dev Fails if the `_queryId` is not in 'Reported' status, or called from an address different to\\n    /// @dev the one that actually posted the given request.\\n    /// @param _queryId The unique query identifier.\\n    function deleteQuery(uint256 _queryId) external returns (Witnet.Response memory);\\n\\n    /// Requests the execution of the given Witnet Data Request in expectation that it will be relayed and solved by the Witnet DON.\\n    /// A reward amount is escrowed by the Witnet Request Board that will be transferred to the reporter who relays back the Witnet-provided \\n    /// result to this request.\\n    /// @dev Fails if:\\n    /// @dev - provided reward is too low.\\n    /// @dev - provided script is zero address.\\n    /// @dev - provided script bytecode is empty.\\n    /// @param _addr The address of the IWitnetRequest contract that can provide the actual Data Request bytecode.\\n    /// @return _queryId An unique query identifier.\\n    function postRequest(IWitnetRequest _addr) external payable returns (uint256 _queryId);\\n\\n    /// Increments the reward of a previously posted request by adding the transaction value to it.\\n    /// @dev Updates request `gasPrice` in case this method is called with a higher \\n    /// @dev gas price value than the one used in previous calls to `postRequest` or\\n    /// @dev `upgradeReward`. \\n    /// @dev Fails if the `_queryId` is not in 'Posted' status.\\n    /// @dev Fails also in case the request `gasPrice` is increased, and the new \\n    /// @dev reward value gets below new recalculated threshold. \\n    /// @param _queryId The unique query identifier.\\n    function upgradeReward(uint256 _queryId) external payable;\\n}\\n\",\"keccak256\":\"0x7c7a991de5f087102b1931d5d8b2e3716d7a90354b3cbafef95d2509a0643453\",\"license\":\"MIT\"},\"witnet-solidity-bridge/contracts/interfaces/IWitnetRequestBoardView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libs/Witnet.sol\\\";\\n\\n/// @title Witnet Request Board info interface.\\n/// @author The Witnet Foundation.\\ninterface IWitnetRequestBoardView {\\n    /// Estimates the amount of reward we need to insert for a given gas price.\\n    /// @param _gasPrice The gas price for which we need to calculate the rewards.\\n    function estimateReward(uint256 _gasPrice) external view returns (uint256);\\n\\n    /// Returns next query id to be generated by the Witnet Request Board.\\n    function getNextQueryId() external view returns (uint256);\\n\\n    /// Gets the whole Query data contents, if any, no matter its current status.\\n    function getQueryData(uint256 _queryId) external view returns (Witnet.Query memory);\\n\\n    /// Gets current status of given query.\\n    function getQueryStatus(uint256 _queryId) external view returns (Witnet.QueryStatus);\\n\\n    /// Retrieves the whole Request record posted to the Witnet Request Board.\\n    /// @dev Fails if the `_queryId` is not valid or, if it has already been reported\\n    /// @dev or deleted.\\n    /// @param _queryId The unique identifier of a previously posted query.\\n    function readRequest(uint256 _queryId) external view returns (Witnet.Request memory);\\n\\n    /// Retrieves the serialized bytecode of a previously posted Witnet Data Request.\\n    /// @dev Fails if the `_queryId` is not valid, or if the related script bytecode \\n    /// @dev got changed after being posted. Returns empty array once it gets reported, \\n    /// @dev or deleted.\\n    /// @param _queryId The unique query identifier.\\n    function readRequestBytecode(uint256 _queryId) external view returns (bytes memory);\\n\\n    /// Retrieves the gas price that any assigned reporter will have to pay when reporting \\n    /// result to a previously posted Witnet data request.\\n    /// @dev Fails if the `_queryId` is not valid or, if it has already been \\n    /// @dev reported, or deleted. \\n    /// @param _queryId The unique query identifie\\n    function readRequestGasPrice(uint256 _queryId) external view returns (uint256);\\n\\n    /// Retrieves the reward currently set for the referred query.\\n    /// @dev Fails if the `_queryId` is not valid or, if it has already been \\n    /// @dev reported, or deleted. \\n    /// @param _queryId The unique query identifier.\\n    function readRequestReward(uint256 _queryId) external view returns (uint256);\\n\\n    /// Retrieves the whole `Witnet.Response` record referred to a previously posted Witnet Data Request.\\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\\n    /// @param _queryId The unique query identifier.\\n    function readResponse(uint256 _queryId) external view returns (Witnet.Response memory);\\n\\n    /// Retrieves the hash of the Witnet transaction hash that actually solved the referred query.\\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\\n    /// @param _queryId The unique query identifier.\\n    function readResponseDrTxHash(uint256 _queryId) external view returns (bytes32);    \\n\\n    /// Retrieves the address that reported the result to a previously-posted request.\\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\\n    /// @param _queryId The unique query identifier.\\n    function readResponseReporter(uint256 _queryId) external view returns (address);\\n\\n    /// Retrieves the Witnet-provided CBOR-bytes result of a previously posted request.\\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\\n    /// @param _queryId The unique query identifier.\\n    function readResponseResult(uint256 _queryId) external view returns (Witnet.Result memory);\\n\\n    /// Retrieves the timestamp in which the result to the referred query was solved by the Witnet DON.\\n    /// @dev Fails if the `_queryId` is not in 'Reported' status.\\n    /// @param _queryId The unique query identifier.\\n    function readResponseTimestamp(uint256 _queryId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x782ec2ff166948f5d097765c0190b352793d8b8887af5f8384d875d63cff4e9b\",\"license\":\"MIT\"},\"witnet-solidity-bridge/contracts/interfaces/IWitnetRequestParser.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../libs/Witnet.sol\\\";\\n\\n/// @title The Witnet interface for decoding Witnet-provided request to Data Requests.\\n/// This interface exposes functions to check for the success/failure of\\n/// a Witnet-provided result, as well as to parse and convert result into\\n/// Solidity types suitable to the application level. \\n/// @author The Witnet Foundation.\\ninterface IWitnetRequestParser {\\n\\n    /// Decode raw CBOR bytes into a Witnet.Result instance.\\n    /// @param _cborBytes Raw bytes representing a CBOR-encoded value.\\n    /// @return A `Witnet.Result` instance.\\n    function resultFromCborBytes(bytes memory _cborBytes) external pure returns (Witnet.Result memory);\\n\\n    /// Decode a CBOR value into a Witnet.Result instance.\\n    /// @param _cborValue An instance of `Witnet.CBOR`.\\n    /// @return A `Witnet.Result` instance.\\n    function resultFromCborValue(Witnet.CBOR memory _cborValue) external pure returns (Witnet.Result memory);\\n\\n    /// Tell if a Witnet.Result is successful.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return `true` if successful, `false` if errored.\\n    function isOk(Witnet.Result memory _result) external pure returns (bool);\\n\\n    /// Tell if a Witnet.Result is errored.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return `true` if errored, `false` if successful.\\n    function isError(Witnet.Result memory _result) external pure returns (bool);\\n\\n    /// Decode a bytes value from a Witnet.Result as a `bytes` value.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return The `bytes` decoded from the Witnet.Result.\\n    function asBytes(Witnet.Result memory _result) external pure returns (bytes memory);\\n\\n    /// Decode a bytes value from a Witnet.Result as a `bytes32` value.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return The `bytes32` decoded from the Witnet.Result.\\n    function asBytes32(Witnet.Result memory _result) external pure returns (bytes32);\\n\\n    /// Decode an error code from a Witnet.Result as a member of `Witnet.ErrorCodes`.\\n    /// @param _result An instance of `Witnet.Result`.\\n    /// @return The `CBORValue.Error memory` decoded from the Witnet.Result.\\n    function asErrorCode(Witnet.Result memory _result) external pure returns (Witnet.ErrorCodes);\\n\\n\\n    /// Generate a suitable error message for a member of `Witnet.ErrorCodes` and its corresponding arguments.\\n    /// @dev WARN: Note that client contracts should wrap this function into a try-catch foreseing potential errors generated in this function\\n    /// @param _result An instance of `Witnet.Result`.\\n    /// @return A tuple containing the `CBORValue.Error memory` decoded from the `Witnet.Result`, plus a loggable error message.\\n    function asErrorMessage(Witnet.Result memory _result) external pure returns (Witnet.ErrorCodes, string memory);\\n\\n    /// Decode a raw error from a `Witnet.Result` as a `uint64[]`.\\n    /// @param _result An instance of `Witnet.Result`.\\n    /// @return The `uint64[]` raw error as decoded from the `Witnet.Result`.\\n    function asRawError(Witnet.Result memory _result) external pure returns(uint64[] memory);\\n\\n    /// Decode a boolean value from a Witnet.Result as an `bool` value.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return The `bool` decoded from the Witnet.Result.\\n    function asBool(Witnet.Result memory _result) external pure returns (bool);\\n\\n    /// Decode a fixed16 (half-precision) numeric value from a Witnet.Result as an `int32` value.\\n    /// @dev Due to the lack of support for floating or fixed point arithmetic in the EVM, this method offsets all values.\\n    /// by 5 decimal orders so as to get a fixed precision of 5 decimal positions, which should be OK for most `fixed16`.\\n    /// use cases. In other words, the output of this method is 10,000 times the actual value, encoded into an `int32`.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return The `int128` decoded from the Witnet.Result.\\n    function asFixed16(Witnet.Result memory _result) external pure returns (int32);\\n\\n    /// Decode an array of fixed16 values from a Witnet.Result as an `int128[]` value.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return The `int128[]` decoded from the Witnet.Result.\\n    function asFixed16Array(Witnet.Result memory _result) external pure returns (int32[] memory);\\n\\n    /// Decode a integer numeric value from a Witnet.Result as an `int128` value.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return The `int128` decoded from the Witnet.Result.\\n    function asInt128(Witnet.Result memory _result) external pure returns (int128);\\n\\n    /// Decode an array of integer numeric values from a Witnet.Result as an `int128[]` value.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return The `int128[]` decoded from the Witnet.Result.\\n    function asInt128Array(Witnet.Result memory _result) external pure returns (int128[] memory);\\n\\n    /// Decode a string value from a Witnet.Result as a `string` value.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return The `string` decoded from the Witnet.Result.\\n    function asString(Witnet.Result memory _result) external pure returns (string memory);\\n\\n    /// Decode an array of string values from a Witnet.Result as a `string[]` value.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return The `string[]` decoded from the Witnet.Result.\\n    function asStringArray(Witnet.Result memory _result) external pure returns (string[] memory);\\n\\n    /// Decode a natural numeric value from a Witnet.Result as a `uint64` value.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return The `uint64` decoded from the Witnet.Result.\\n    function asUint64(Witnet.Result memory _result) external pure returns(uint64);\\n\\n    /// Decode an array of natural numeric values from a Witnet.Result as a `uint64[]` value.\\n    /// @param _result An instance of Witnet.Result.\\n    /// @return The `uint64[]` decoded from the Witnet.Result.\\n    function asUint64Array(Witnet.Result memory _result) external pure returns (uint64[] memory);\\n\\n}\\n\",\"keccak256\":\"0xe7c24475babac7d21172d37d976a97b81053739e81b4697be39decfe2aa90945\",\"license\":\"MIT\"},\"witnet-solidity-bridge/contracts/libs/Witnet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IWitnetRequest.sol\\\";\\n\\nlibrary Witnet {\\n\\n    /// @notice Witnet function that computes the hash of a CBOR-encoded Data Request.\\n    /// @param _bytecode CBOR-encoded RADON.\\n    function hash(bytes memory _bytecode) internal pure returns (bytes32) {\\n        return sha256(_bytecode);\\n    }\\n\\n    /// Struct containing both request and response data related to every query posted to the Witnet Request Board\\n    struct Query {\\n        Request request;\\n        Response response;\\n        address from;      // Address from which the request was posted.\\n    }\\n\\n    /// Possible status of a Witnet query.\\n    enum QueryStatus {\\n        Unknown,\\n        Posted,\\n        Reported,\\n        Deleted\\n    }\\n\\n    /// Data kept in EVM-storage for every Request posted to the Witnet Request Board.\\n    struct Request {\\n        IWitnetRequest addr;    // The contract containing the Data Request which execution has been requested.\\n        address requester;      // Address from which the request was posted.\\n        bytes32 hash;           // Hash of the Data Request whose execution has been requested.\\n        uint256 gasprice;       // Minimum gas price the DR resolver should pay on the solving tx.\\n        uint256 reward;         // Escrowed reward to be paid to the DR resolver.\\n    }\\n\\n    /// Data kept in EVM-storage containing Witnet-provided response metadata and result.\\n    struct Response {\\n        address reporter;       // Address from which the result was reported.\\n        uint256 timestamp;      // Timestamp of the Witnet-provided result.\\n        bytes32 drTxHash;       // Hash of the Witnet transaction that solved the queried Data Request.\\n        bytes   cborBytes;      // Witnet-provided result CBOR-bytes to the queried Data Request.\\n    }\\n\\n    /// Data struct containing the Witnet-provided result to a Data Request.\\n    struct Result {\\n        bool success;           // Flag stating whether the request could get solved successfully, or not.\\n        CBOR value;             // Resulting value, in CBOR-serialized bytes.\\n    }\\n\\n    /// Data struct following the RFC-7049 standard: Concise Binary Object Representation.\\n    struct CBOR {\\n        Buffer buffer;\\n        uint8 initialByte;\\n        uint8 majorType;\\n        uint8 additionalInformation;\\n        uint64 len;\\n        uint64 tag;\\n    }\\n\\n    /// Iterable bytes buffer.\\n    struct Buffer {\\n        bytes data;\\n        uint32 cursor;\\n    }\\n\\n    /// Witnet error codes table.\\n    enum ErrorCodes {\\n        // 0x00: Unknown error. Something went really bad!\\n        Unknown,\\n        // Script format errors\\n        /// 0x01: At least one of the source scripts is not a valid CBOR-encoded value.\\n        SourceScriptNotCBOR,\\n        /// 0x02: The CBOR value decoded from a source script is not an Array.\\n        SourceScriptNotArray,\\n        /// 0x03: The Array value decoded form a source script is not a valid Data Request.\\n        SourceScriptNotRADON,\\n        /// Unallocated\\n        ScriptFormat0x04,\\n        ScriptFormat0x05,\\n        ScriptFormat0x06,\\n        ScriptFormat0x07,\\n        ScriptFormat0x08,\\n        ScriptFormat0x09,\\n        ScriptFormat0x0A,\\n        ScriptFormat0x0B,\\n        ScriptFormat0x0C,\\n        ScriptFormat0x0D,\\n        ScriptFormat0x0E,\\n        ScriptFormat0x0F,\\n        // Complexity errors\\n        /// 0x10: The request contains too many sources.\\n        RequestTooManySources,\\n        /// 0x11: The script contains too many calls.\\n        ScriptTooManyCalls,\\n        /// Unallocated\\n        Complexity0x12,\\n        Complexity0x13,\\n        Complexity0x14,\\n        Complexity0x15,\\n        Complexity0x16,\\n        Complexity0x17,\\n        Complexity0x18,\\n        Complexity0x19,\\n        Complexity0x1A,\\n        Complexity0x1B,\\n        Complexity0x1C,\\n        Complexity0x1D,\\n        Complexity0x1E,\\n        Complexity0x1F,\\n        // Operator errors\\n        /// 0x20: The operator does not exist.\\n        UnsupportedOperator,\\n        /// Unallocated\\n        Operator0x21,\\n        Operator0x22,\\n        Operator0x23,\\n        Operator0x24,\\n        Operator0x25,\\n        Operator0x26,\\n        Operator0x27,\\n        Operator0x28,\\n        Operator0x29,\\n        Operator0x2A,\\n        Operator0x2B,\\n        Operator0x2C,\\n        Operator0x2D,\\n        Operator0x2E,\\n        Operator0x2F,\\n        // Retrieval-specific errors\\n        /// 0x30: At least one of the sources could not be retrieved, but returned HTTP error.\\n        HTTP,\\n        /// 0x31: Retrieval of at least one of the sources timed out.\\n        RetrievalTimeout,\\n        /// Unallocated\\n        Retrieval0x32,\\n        Retrieval0x33,\\n        Retrieval0x34,\\n        Retrieval0x35,\\n        Retrieval0x36,\\n        Retrieval0x37,\\n        Retrieval0x38,\\n        Retrieval0x39,\\n        Retrieval0x3A,\\n        Retrieval0x3B,\\n        Retrieval0x3C,\\n        Retrieval0x3D,\\n        Retrieval0x3E,\\n        Retrieval0x3F,\\n        // Math errors\\n        /// 0x40: Math operator caused an underflow.\\n        Underflow,\\n        /// 0x41: Math operator caused an overflow.\\n        Overflow,\\n        /// 0x42: Tried to divide by zero.\\n        DivisionByZero,\\n        /// Unallocated\\n        Math0x43,\\n        Math0x44,\\n        Math0x45,\\n        Math0x46,\\n        Math0x47,\\n        Math0x48,\\n        Math0x49,\\n        Math0x4A,\\n        Math0x4B,\\n        Math0x4C,\\n        Math0x4D,\\n        Math0x4E,\\n        Math0x4F,\\n        // Other errors\\n        /// 0x50: Received zero reveals\\n        NoReveals,\\n        /// 0x51: Insufficient consensus in tally precondition clause\\n        InsufficientConsensus,\\n        /// 0x52: Received zero commits\\n        InsufficientCommits,\\n        /// 0x53: Generic error during tally execution\\n        TallyExecution,\\n        /// Unallocated\\n        OtherError0x54,\\n        OtherError0x55,\\n        OtherError0x56,\\n        OtherError0x57,\\n        OtherError0x58,\\n        OtherError0x59,\\n        OtherError0x5A,\\n        OtherError0x5B,\\n        OtherError0x5C,\\n        OtherError0x5D,\\n        OtherError0x5E,\\n        OtherError0x5F,\\n        /// 0x60: Invalid reveal serialization (malformed reveals are converted to this value)\\n        MalformedReveal,\\n        /// Unallocated\\n        OtherError0x61,\\n        OtherError0x62,\\n        OtherError0x63,\\n        OtherError0x64,\\n        OtherError0x65,\\n        OtherError0x66,\\n        OtherError0x67,\\n        OtherError0x68,\\n        OtherError0x69,\\n        OtherError0x6A,\\n        OtherError0x6B,\\n        OtherError0x6C,\\n        OtherError0x6D,\\n        OtherError0x6E,\\n        OtherError0x6F,\\n        // Access errors\\n        /// 0x70: Tried to access a value from an index using an index that is out of bounds\\n        ArrayIndexOutOfBounds,\\n        /// 0x71: Tried to access a value from a map using a key that does not exist\\n        MapKeyNotFound,\\n        /// Unallocated\\n        OtherError0x72,\\n        OtherError0x73,\\n        OtherError0x74,\\n        OtherError0x75,\\n        OtherError0x76,\\n        OtherError0x77,\\n        OtherError0x78,\\n        OtherError0x79,\\n        OtherError0x7A,\\n        OtherError0x7B,\\n        OtherError0x7C,\\n        OtherError0x7D,\\n        OtherError0x7E,\\n        OtherError0x7F,\\n        OtherError0x80,\\n        OtherError0x81,\\n        OtherError0x82,\\n        OtherError0x83,\\n        OtherError0x84,\\n        OtherError0x85,\\n        OtherError0x86,\\n        OtherError0x87,\\n        OtherError0x88,\\n        OtherError0x89,\\n        OtherError0x8A,\\n        OtherError0x8B,\\n        OtherError0x8C,\\n        OtherError0x8D,\\n        OtherError0x8E,\\n        OtherError0x8F,\\n        OtherError0x90,\\n        OtherError0x91,\\n        OtherError0x92,\\n        OtherError0x93,\\n        OtherError0x94,\\n        OtherError0x95,\\n        OtherError0x96,\\n        OtherError0x97,\\n        OtherError0x98,\\n        OtherError0x99,\\n        OtherError0x9A,\\n        OtherError0x9B,\\n        OtherError0x9C,\\n        OtherError0x9D,\\n        OtherError0x9E,\\n        OtherError0x9F,\\n        OtherError0xA0,\\n        OtherError0xA1,\\n        OtherError0xA2,\\n        OtherError0xA3,\\n        OtherError0xA4,\\n        OtherError0xA5,\\n        OtherError0xA6,\\n        OtherError0xA7,\\n        OtherError0xA8,\\n        OtherError0xA9,\\n        OtherError0xAA,\\n        OtherError0xAB,\\n        OtherError0xAC,\\n        OtherError0xAD,\\n        OtherError0xAE,\\n        OtherError0xAF,\\n        OtherError0xB0,\\n        OtherError0xB1,\\n        OtherError0xB2,\\n        OtherError0xB3,\\n        OtherError0xB4,\\n        OtherError0xB5,\\n        OtherError0xB6,\\n        OtherError0xB7,\\n        OtherError0xB8,\\n        OtherError0xB9,\\n        OtherError0xBA,\\n        OtherError0xBB,\\n        OtherError0xBC,\\n        OtherError0xBD,\\n        OtherError0xBE,\\n        OtherError0xBF,\\n        OtherError0xC0,\\n        OtherError0xC1,\\n        OtherError0xC2,\\n        OtherError0xC3,\\n        OtherError0xC4,\\n        OtherError0xC5,\\n        OtherError0xC6,\\n        OtherError0xC7,\\n        OtherError0xC8,\\n        OtherError0xC9,\\n        OtherError0xCA,\\n        OtherError0xCB,\\n        OtherError0xCC,\\n        OtherError0xCD,\\n        OtherError0xCE,\\n        OtherError0xCF,\\n        OtherError0xD0,\\n        OtherError0xD1,\\n        OtherError0xD2,\\n        OtherError0xD3,\\n        OtherError0xD4,\\n        OtherError0xD5,\\n        OtherError0xD6,\\n        OtherError0xD7,\\n        OtherError0xD8,\\n        OtherError0xD9,\\n        OtherError0xDA,\\n        OtherError0xDB,\\n        OtherError0xDC,\\n        OtherError0xDD,\\n        OtherError0xDE,\\n        OtherError0xDF,\\n        // Bridge errors: errors that only belong in inter-client communication\\n        /// 0xE0: Requests that cannot be parsed must always get this error as their result.\\n        /// However, this is not a valid result in a Tally transaction, because invalid requests\\n        /// are never included into blocks and therefore never get a Tally in response.\\n        BridgeMalformedRequest,\\n        /// 0xE1: Witnesses exceeds 100\\n        BridgePoorIncentives,\\n        /// 0xE2: The request is rejected on the grounds that it may cause the submitter to spend or stake an\\n        /// amount of value that is unjustifiably high when compared with the reward they will be getting\\n        BridgeOversizedResult,\\n        /// Unallocated\\n        OtherError0xE3,\\n        OtherError0xE4,\\n        OtherError0xE5,\\n        OtherError0xE6,\\n        OtherError0xE7,\\n        OtherError0xE8,\\n        OtherError0xE9,\\n        OtherError0xEA,\\n        OtherError0xEB,\\n        OtherError0xEC,\\n        OtherError0xED,\\n        OtherError0xEE,\\n        OtherError0xEF,\\n        OtherError0xF0,\\n        OtherError0xF1,\\n        OtherError0xF2,\\n        OtherError0xF3,\\n        OtherError0xF4,\\n        OtherError0xF5,\\n        OtherError0xF6,\\n        OtherError0xF7,\\n        OtherError0xF8,\\n        OtherError0xF9,\\n        OtherError0xFA,\\n        OtherError0xFB,\\n        OtherError0xFC,\\n        OtherError0xFD,\\n        OtherError0xFE,\\n        // This should not exist:\\n        /// 0xFF: Some tally error is not intercepted but should\\n        UnhandledIntercept\\n    }\\n}\\n\",\"keccak256\":\"0x7875cbaff083818824bcec302443788fb5723b161952fdf28a0ddd7c4b3a9b3e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161131338038061131383398101604081905261002f916100b7565b6100383361004f565b6001600160a01b039182166080521660a0526100f1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146100b457600080fd5b50565b600080604083850312156100ca57600080fd5b82516100d58161009f565b60208401519092506100e68161009f565b809150509250929050565b60805160a0516111cc610147600039600081816101900152610bd1015260008181610110015281816104ef015281816105710152818161061f01528181610788015281816108ae0152610a3201526111cc6000f3fe6080604052600436106100bc5760003560e01c806380869853116100745780639791c0971161004e5780639791c097146101e3578063aeb8ce9b14610213578063f2fde38b1461023357600080fd5b8063808698531461017e578063884d7675146101b25780638da5cb5b146101c557600080fd5b80633ccfd60b116100a55780633ccfd60b14610132578063530e784f14610149578063715018a61461016957600080fd5b80632630c12f146100c15780632b20e397146100fe575b600080fd5b3480156100cd57600080fd5b506001546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010a57600080fd5b506100e17f000000000000000000000000000000000000000000000000000000000000000081565b34801561013e57600080fd5b50610147610253565b005b34801561015557600080fd5b50610147610164366004610dee565b610290565b34801561017557600080fd5b5061014761031e565b34801561018a57600080fd5b506100e17f000000000000000000000000000000000000000000000000000000000000000081565b6101476101c0366004610e2b565b610384565b3480156101d157600080fd5b506000546001600160a01b03166100e1565b3480156101ef57600080fd5b506102036101fe366004610ef5565b6109f5565b60405190151581526020016100f5565b34801561021f57600080fd5b5061020361022e366004610ef5565b610a09565b34801561023f57600080fd5b5061014761024e366004610dee565b610aae565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f1935050505015801561028d573d6000803e3d6000fd5b50565b6000546001600160a01b031633146102ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103785760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e6565b6103826000610b72565b565b6001546001600160a01b03166103ad576040516306e95cc560e21b815260040160405180910390fd5b6103ec86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a0992505050565b61040957604051630c01d0b160e21b815260040160405180910390fd5b600154604051639ebb009b60e01b81526000916001600160a01b031690639ebb009b9061043e908a908a903390600401610fcf565b602060405180830381865afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f9190610ffc565b9050336104946000546001600160a01b031690565b6001600160a01b0316036104a6575060005b803410156104c75760405163281a6d2760e11b815260040160405180910390fd5b60006001600160a01b0385161561087857604051631e59c52960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e59c52990610528908b908b903090600401610fcf565b6020604051808303816000875af1158015610547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056b9190610ffc565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663114902c56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f19190610ffc565b60408051602081019290925281018390526060016040516020818303038152906040528051906020012090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b1039996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f9190611015565b604051630c4b7b8560e11b8152600481018390526001600160a01b0388811660248301529190911690631896f70a90604401600060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b505050506001600160a01b038516156107745760405162d5fa2b60e81b8152600481018290526001600160a01b03868116602483015287169063d5fa2b0090604401600060405180830381600087803b15801561075b57600080fd5b505af115801561076f573d6000803e3d6000fd5b505050505b83156107865761078689898833610bcf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b1039996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108089190611015565b6040516323b872dd60e01b81523060048201526001600160a01b0389811660248301526044820184905291909116906323b872dd90606401600060405180830381600087803b15801561085a57600080fd5b505af115801561086e573d6000803e3d6000fd5b505050505061092d565b6001600160a01b0384161561088c57600080fd5b821561089757600080fd5b604051631e59c52960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e59c529906108e7908b908b908b90600401610fcf565b6020604051808303816000875af1158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a9190610ffc565b90505b856001600160a01b0316817f949d23b49bd03f2681389f579003c80eeb63fea84d0c36204dab1be0937852168a8a604051610969929190611032565b60405180910390a3600080546040516001600160a01b039091169184156108fc02918591818181858888f193505050501580156109aa573d6000803e3d6000fd5b50813411156109eb57336108fc6109c18434611064565b6040518115909202916000818181858888f193505050501580156109e9573d6000803e3d6000fd5b505b5050505050505050565b600080610a0183610c8c565b101592915050565b6000610a14826109f5565b8015610aa8575060405163aeb8ce9b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063aeb8ce9b90610a679085906004016110c8565b602060405180830381865afa158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa891906110db565b92915050565b6000546001600160a01b03163314610b085760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e6565b6001600160a01b038116610b6d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e6565b61028d815b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a806d6b3383858888604051602001610c149291906110f8565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610c429493929190611111565b6020604051808303816000875af1158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c859190610ffc565b5050505050565b600080825b8051821015610dc2576007818381518110610cae57610cae61114f565b01602001516001600160f81b031990811690911c16600003610cdc57610cd5600183611165565b9150610db0565b8051600360f91b90600590839085908110610cf957610cf961114f565b01602001516001600160f81b031990811690911c1603610d1e57610cd5600283611165565b8051600760f91b90600490839085908110610d3b57610d3b61114f565b01602001516001600160f81b031990811690911c1603610d6057610cd5600383611165565b8051600f60f91b90600390839085908110610d7d57610d7d61114f565b01602001516001600160f81b031990811690911c1603610da257610cd5600483611165565b610dad600183611165565b91505b82610dba8161117d565b935050610c91565b5050919050565b6001600160a01b038116811461028d57600080fd5b8035610de981610dc9565b919050565b600060208284031215610e0057600080fd5b8135610e0b81610dc9565b9392505050565b801515811461028d57600080fd5b8035610de981610e12565b60008060008060008060a08789031215610e4457600080fd5b863567ffffffffffffffff80821115610e5c57600080fd5b818901915089601f830112610e7057600080fd5b813581811115610e7f57600080fd5b8a6020828501011115610e9157600080fd5b60209283019850965050870135610ea781610dc9565b93506040870135610eb781610dc9565b9250610ec560608801610dde565b9150610ed360808801610e20565b90509295509295509295565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610f0757600080fd5b813567ffffffffffffffff80821115610f1f57600080fd5b818401915084601f830112610f3357600080fd5b813581811115610f4557610f45610edf565b604051601f8201601f19908116603f01168101908382118183101715610f6d57610f6d610edf565b81604052828152876020848701011115610f8657600080fd5b826020860160208301376000928101602001929092525095945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000610fe3604083018587610fa6565b90506001600160a01b0383166020830152949350505050565b60006020828403121561100e57600080fd5b5051919050565b60006020828403121561102757600080fd5b8151610e0b81610dc9565b602081526000611046602083018486610fa6565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156110765761107661104e565b500390565b6000815180845260005b818110156110a157602081850181015186830182015201611085565b818111156110b3576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610e0b602083018461107b565b6000602082840312156110ed57600080fd5b8151610e0b81610e12565b81838237632e6b636360e01b9101908152600401919050565b60006001600160a01b038087168352808616602084015280851660408401525060806060830152611145608083018461107b565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b600082198211156111785761117861104e565b500190565b60006001820161118f5761118f61104e565b506001019056fea2646970667358221220ce176afca4d23d4c9303495bc168e82a11b1ef624d4770debb039f24a343785264736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100bc5760003560e01c806380869853116100745780639791c0971161004e5780639791c097146101e3578063aeb8ce9b14610213578063f2fde38b1461023357600080fd5b8063808698531461017e578063884d7675146101b25780638da5cb5b146101c557600080fd5b80633ccfd60b116100a55780633ccfd60b14610132578063530e784f14610149578063715018a61461016957600080fd5b80632630c12f146100c15780632b20e397146100fe575b600080fd5b3480156100cd57600080fd5b506001546100e1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561010a57600080fd5b506100e17f000000000000000000000000000000000000000000000000000000000000000081565b34801561013e57600080fd5b50610147610253565b005b34801561015557600080fd5b50610147610164366004610dee565b610290565b34801561017557600080fd5b5061014761031e565b34801561018a57600080fd5b506100e17f000000000000000000000000000000000000000000000000000000000000000081565b6101476101c0366004610e2b565b610384565b3480156101d157600080fd5b506000546001600160a01b03166100e1565b3480156101ef57600080fd5b506102036101fe366004610ef5565b6109f5565b60405190151581526020016100f5565b34801561021f57600080fd5b5061020361022e366004610ef5565b610a09565b34801561023f57600080fd5b5061014761024e366004610dee565b610aae565b600080546040516001600160a01b03909116914780156108fc02929091818181858888f1935050505015801561028d573d6000803e3d6000fd5b50565b6000546001600160a01b031633146102ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103785760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e6565b6103826000610b72565b565b6001546001600160a01b03166103ad576040516306e95cc560e21b815260040160405180910390fd5b6103ec86868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a0992505050565b61040957604051630c01d0b160e21b815260040160405180910390fd5b600154604051639ebb009b60e01b81526000916001600160a01b031690639ebb009b9061043e908a908a903390600401610fcf565b602060405180830381865afa15801561045b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047f9190610ffc565b9050336104946000546001600160a01b031690565b6001600160a01b0316036104a6575060005b803410156104c75760405163281a6d2760e11b815260040160405180910390fd5b60006001600160a01b0385161561087857604051631e59c52960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e59c52990610528908b908b903090600401610fcf565b6020604051808303816000875af1158015610547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056b9190610ffc565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663114902c56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f19190610ffc565b60408051602081019290925281018390526060016040516020818303038152906040528051906020012090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b1039996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561067b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069f9190611015565b604051630c4b7b8560e11b8152600481018390526001600160a01b0388811660248301529190911690631896f70a90604401600060405180830381600087803b1580156106eb57600080fd5b505af11580156106ff573d6000803e3d6000fd5b505050506001600160a01b038516156107745760405162d5fa2b60e81b8152600481018290526001600160a01b03868116602483015287169063d5fa2b0090604401600060405180830381600087803b15801561075b57600080fd5b505af115801561076f573d6000803e3d6000fd5b505050505b83156107865761078689898833610bcf565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637b1039996040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108089190611015565b6040516323b872dd60e01b81523060048201526001600160a01b0389811660248301526044820184905291909116906323b872dd90606401600060405180830381600087803b15801561085a57600080fd5b505af115801561086e573d6000803e3d6000fd5b505050505061092d565b6001600160a01b0384161561088c57600080fd5b821561089757600080fd5b604051631e59c52960e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631e59c529906108e7908b908b908b90600401610fcf565b6020604051808303816000875af1158015610906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092a9190610ffc565b90505b856001600160a01b0316817f949d23b49bd03f2681389f579003c80eeb63fea84d0c36204dab1be0937852168a8a604051610969929190611032565b60405180910390a3600080546040516001600160a01b039091169184156108fc02918591818181858888f193505050501580156109aa573d6000803e3d6000fd5b50813411156109eb57336108fc6109c18434611064565b6040518115909202916000818181858888f193505050501580156109e9573d6000803e3d6000fd5b505b5050505050505050565b600080610a0183610c8c565b101592915050565b6000610a14826109f5565b8015610aa8575060405163aeb8ce9b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063aeb8ce9b90610a679085906004016110c8565b602060405180830381865afa158015610a84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa891906110db565b92915050565b6000546001600160a01b03163314610b085760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102e6565b6001600160a01b038116610b6d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e6565b61028d815b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a806d6b3383858888604051602001610c149291906110f8565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610c429493929190611111565b6020604051808303816000875af1158015610c61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c859190610ffc565b5050505050565b600080825b8051821015610dc2576007818381518110610cae57610cae61114f565b01602001516001600160f81b031990811690911c16600003610cdc57610cd5600183611165565b9150610db0565b8051600360f91b90600590839085908110610cf957610cf961114f565b01602001516001600160f81b031990811690911c1603610d1e57610cd5600283611165565b8051600760f91b90600490839085908110610d3b57610d3b61114f565b01602001516001600160f81b031990811690911c1603610d6057610cd5600383611165565b8051600f60f91b90600390839085908110610d7d57610d7d61114f565b01602001516001600160f81b031990811690911c1603610da257610cd5600483611165565b610dad600183611165565b91505b82610dba8161117d565b935050610c91565b5050919050565b6001600160a01b038116811461028d57600080fd5b8035610de981610dc9565b919050565b600060208284031215610e0057600080fd5b8135610e0b81610dc9565b9392505050565b801515811461028d57600080fd5b8035610de981610e12565b60008060008060008060a08789031215610e4457600080fd5b863567ffffffffffffffff80821115610e5c57600080fd5b818901915089601f830112610e7057600080fd5b813581811115610e7f57600080fd5b8a6020828501011115610e9157600080fd5b60209283019850965050870135610ea781610dc9565b93506040870135610eb781610dc9565b9250610ec560608801610dde565b9150610ed360808801610e20565b90509295509295509295565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610f0757600080fd5b813567ffffffffffffffff80821115610f1f57600080fd5b818401915084601f830112610f3357600080fd5b813581811115610f4557610f45610edf565b604051601f8201601f19908116603f01168101908382118183101715610f6d57610f6d610edf565b81604052828152876020848701011115610f8657600080fd5b826020860160208301376000928101602001929092525095945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b604081526000610fe3604083018587610fa6565b90506001600160a01b0383166020830152949350505050565b60006020828403121561100e57600080fd5b5051919050565b60006020828403121561102757600080fd5b8151610e0b81610dc9565b602081526000611046602083018486610fa6565b949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156110765761107661104e565b500390565b6000815180845260005b818110156110a157602081850181015186830182015201611085565b818111156110b3576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610e0b602083018461107b565b6000602082840312156110ed57600080fd5b8151610e0b81610e12565b81838237632e6b636360e01b9101908152600401919050565b60006001600160a01b038087168352808616602084015280851660408401525060806060830152611145608083018461107b565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b600082198211156111785761117861104e565b500190565b60006001820161118f5761118f61104e565b506001019056fea2646970667358221220ce176afca4d23d4c9303495bc168e82a11b1ef624d4770debb039f24a343785264736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4295,
        "contract": "src/KNSRegistrarController.sol:KNSRegistrarController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8493,
        "contract": "src/KNSRegistrarController.sol:KNSRegistrarController",
        "label": "priceOracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(KNSPriceOracle)8040"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(KNSPriceOracle)8040": {
        "encoding": "inplace",
        "label": "contract KNSPriceOracle",
        "numberOfBytes": "20"
      }
    }
  }
}